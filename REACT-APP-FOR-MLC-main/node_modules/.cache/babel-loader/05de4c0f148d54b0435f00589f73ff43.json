{"ast":null,"code":"const http = require('http'); // gets the query and retuns the list of data from the query\n\n\nexport function getList(reqURL, query) {\n  var list = []; // post request\n\n  var req = reqURL + encodeURIComponent(query);\n  http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      for (let i = 0; i < data.split('<literal>').length; i++) {\n        list[i] = data.split('<literal>')[i].split('</literal>')[0];\n      }\n\n      list.shift();\n      list.sort((a, b) => a.localeCompare(b, undefined, {\n        sensitivity: 'base'\n      })); // sort\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/utils.js"],"names":["http","require","getList","reqURL","query","list","req","encodeURIComponent","get","resp","data","on","chunk","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","err","console","log"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EACP;AACC,MAAIC,IAAI,GAAG,EAAX,CADD,CAGC;;AACA,MAAIC,GAAG,GAAGH,MAAM,GAACI,kBAAkB,CAACH,KAAD,CAAnC;AACAJ,EAAAA,IAAI,CAACQ,GAAL,CAASF,GAAT,EAAeG,IAAD,IAAU;AACvB,QAAIC,IAAI,GAAG,EAAX,CADuB,CAGvB;;AACAD,IAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAiBC,KAAD,IAAW;AAC1BF,MAAAA,IAAI,IAAIE,KAAR;AACA,KAFD,EAJuB,CAQvB;;AACAH,IAAAA,IAAI,CACHE,EADD,CACI,KADJ,EACW,MAAM;AAChB;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAW,WAAX,EAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EACA;AACCR,QAAAA,IAAI,CAACQ,CAAD,CAAJ,GAAUH,IAAI,CAACI,KAAL,CAAW,WAAX,EAAwBD,CAAxB,EAA2BC,KAA3B,CAAiC,YAAjC,EAA+C,CAA/C,CAAV;AACA;;AACDT,MAAAA,IAAI,CAACW,KAAL;AACAX,MAAAA,IAAI,CAACY,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,EAAmBE,SAAnB,EAA8B;AAACC,QAAAA,WAAW,EAAE;AAAd,OAA9B,CAApB,EAPgB,CAO2D;AAE1E,KAVF;AAWC,GApBF,EAqBEX,EArBF,CAqBK,OArBL,EAqBeY,GAAD,IAAS;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,GAvBF;AAyBA,SAAOlB,IAAP;AACA","sourcesContent":["const http = require('http')\r\n\r\n// gets the query and retuns the list of data from the query\r\nexport function getList(reqURL ,query)\r\n{\r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = reqURL+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'})); // sort\r\n\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\treturn list;\r\n}"]},"metadata":{},"sourceType":"module"}