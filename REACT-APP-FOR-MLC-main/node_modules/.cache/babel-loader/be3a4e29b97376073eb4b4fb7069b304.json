{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajax\\\\Desktop\\\\Praksa\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\EvaluationMeasureRange.jsx\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { AntSwitch, CustomCard, CustomAddIcon, CustomAutocomplete, CustomPaper } from './themes.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EvaluationMeasureRange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMeasure = this.handleMeasure.bind(this);\n    this.handleRange = this.handleRange.bind(this);\n    this.handleMeasureError = this.handleMeasureError.bind(this);\n    this.handleRangeError = this.handleRangeError.bind(this);\n    this.state = {\n      selectedMeasure: props.measure,\n      selectedRange: props.range,\n      measureError: false,\n      rangeError: false,\n      disabledMeasures: props.disabledMeasures,\n      evaluationMeasureList: props.evaluationMeasureList\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      selectedMeasure: this.props.measure,\n      selectedRange: this.props.range,\n      disabledMeasures: this.props.disabledMeasures,\n      evaluationMeasureList: this.props.evaluationMeasureList\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(\"updated\");\n      this.setState({\n        selectedMeasure: this.props.measure,\n        selectedRange: this.props.range,\n        disabledMeasures: this.props.disabledMeasures,\n        evaluationMeasureList: this.props.evaluationMeasureList\n      });\n    }\n  }\n\n  handleMeasure(e, v) {\n    this.setState({\n      selectedMeasure: v\n    });\n    this.props.onHandleMeasureChange(v, this.props.id);\n  }\n\n  handleRange(e) {\n    this.setState({\n      selectedRange: e.target.value\n    }, () => {\n      this.handleRangeError();\n    });\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\n  }\n\n  handleMeasureError() {\n    this.setState({\n      measureError: !this.state.selectedMeasure\n    });\n  }\n\n  handleRangeError() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n    if (this.state.selectedRange === '' || regex.test(this.state.selectedRange)) this.setState({\n      rangeError: false\n    });else this.setState({\n      rangeError: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 1,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(CustomAutocomplete, {\n          multiple: false,\n          limitTags: 50,\n          options: this.state.evaluationMeasureList,\n          getOptionDisabled: option => !!this.state.disabledMeasures.find(element => element === option),\n          value: this.state.selectedMeasure,\n          sx: {\n            width: 300,\n            m: 1,\n            mb: 1.5\n          } //isOptionEqualToValue={(option, value) => option.value === value.value}\n          ,\n          onChange: (event, value) => this.handleMeasure(event, value),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Evaluation measure\",\n            color: \"secondary\",\n            onChange: this.handleMeasureError,\n            error: this.state.selectedMeasure === \"\" && this.state.selectedRange !== \"\" && !this.state.rangeError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Range\",\n          color: \"secondary\",\n          variant: \"outlined\",\n          style: {\n            marginTop: 8\n          },\n          size: \"small\",\n          value: this.state.selectedRange,\n          onChange: this.handleRange,\n          error: this.state.rangeError,\n          helperText: this.state.rangeError && \"Please enter a valid range.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EvaluationMeasureRange;","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/src/components/EvaluationMeasureRange.jsx"],"names":["React","Grid","TextField","AntSwitch","CustomCard","CustomAddIcon","CustomAutocomplete","CustomPaper","EvaluationMeasureRange","Component","constructor","props","handleMeasure","bind","handleRange","handleMeasureError","handleRangeError","state","selectedMeasure","measure","selectedRange","range","measureError","rangeError","disabledMeasures","evaluationMeasureList","componentDidMount","setState","componentDidUpdate","prevProps","console","log","e","v","onHandleMeasureChange","id","target","value","onHandleRangeChange","regex","RegExp","test","render","option","find","element","width","m","mb","event","params","marginTop"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport {AntSwitch, CustomCard, CustomAddIcon, CustomAutocomplete, CustomPaper} from './themes.js';\r\n\r\nclass EvaluationMeasureRange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMeasure = this.handleMeasure.bind(this);\r\n    this.handleRange = this.handleRange.bind(this);\r\n    this.handleMeasureError= this.handleMeasureError.bind(this);\r\n    this.handleRangeError= this.handleRangeError.bind(this);\r\n\r\n    this.state = {\r\n      selectedMeasure: props.measure,\r\n      selectedRange: props.range,\r\n      measureError: false,\r\n\t\t\trangeError: false,\r\n      disabledMeasures: props.disabledMeasures,\r\n      evaluationMeasureList: props.evaluationMeasureList,\r\n      \r\n    };\r\n  }\r\n    \r\n  componentDidMount()\r\n  {\r\n  this.setState({\r\n    selectedMeasure: this.props.measure,\r\n    selectedRange: this.props.range,\r\n    disabledMeasures: this.props.disabledMeasures,\r\n    evaluationMeasureList: this.props.evaluationMeasureList\r\n  })}\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(prevProps !== this.props){\r\n      console.log(\"updated\")\r\n      this.setState({\r\n        selectedMeasure: this.props.measure,\r\n        selectedRange: this.props.range,\r\n        disabledMeasures: this.props.disabledMeasures,\r\n        evaluationMeasureList: this.props.evaluationMeasureList\r\n      })\r\n    }\r\n  }\r\n \r\n\r\n\thandleMeasure(e, v) {\r\n    this.setState({selectedMeasure: v})\r\n    this.props.onHandleMeasureChange(v, this.props.id);\r\n\t}\r\n\r\n  handleRange(e) {\r\n    this.setState({\r\n      selectedRange: e.target.value\r\n    }, ()=>{this.handleRangeError()})\r\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\r\n\t}\r\n\t\r\n  handleMeasureError() {\r\n      this.setState({ measureError: !this.state.selectedMeasure })\r\n  }\r\n\r\n  handleRangeError() {\r\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n    if ( this.state.selectedRange === '' || regex.test(this.state.selectedRange))\r\n      this.setState({ rangeError: false })\r\n    else\r\n      this.setState({ rangeError: true })\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <Grid container spacing = {1}>\r\n        <Grid item>\r\n          <CustomAutocomplete\r\n            multiple = {false}\r\n            limitTags={50}\r\n            options={this.state.evaluationMeasureList}\r\n            getOptionDisabled={(option) => !!this.state.disabledMeasures.find(element => element === option)}\r\n            value={this.state.selectedMeasure}\r\n            sx={{width: 300, m:1, mb:1.5}}\r\n            //isOptionEqualToValue={(option, value) => option.value === value.value}\r\n            onChange={(event, value) => this.handleMeasure(event, value)}\r\n            renderInput={(params) => \r\n              <TextField {...params}\r\n                variant='outlined'\r\n                label = \"Evaluation measure\"\r\n                color='secondary'\r\n                onChange={this.handleMeasureError}\r\n                error={this.state.selectedMeasure===\"\" && this.state.selectedRange!==\"\" && !this.state.rangeError}\r\n              />\r\n            }\r\n\t\t\t\t\t/>\r\n        </Grid> \r\n        <Grid item>\r\n          <TextField\r\n            label='Range'\r\n            color='secondary'\r\n            variant='outlined'\r\n            style={{marginTop: 8, }}\r\n            size=\"small\"\r\n            value={this.state.selectedRange}\r\n            onChange={this.handleRange}\r\n            error={this.state.rangeError}\r\n            helperText={this.state.rangeError &&  \"Please enter a valid range.\"}\r\n          />\r\n\t\t\t\t</Grid>\r\n      </Grid>\r\n    );\r\n   }\r\n }\r\n\r\n export default EvaluationMeasureRange;\r\n "]},"metadata":{},"sourceType":"module"}