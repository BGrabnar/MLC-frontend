{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\PerformanceDataTable.jsx\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PerformanceDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getRows = query => {\n      // columns\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (!this.state.validationFolds) {\n        for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n          var subColumn = {\n            field: this.state.evaluationMeasureList[i],\n            width: 250\n          };\n          columns.push(subColumn);\n        }\n      } // rows\n\n\n      var list = []; // post request\n\n      var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList = {\n              id: i,\n              dataset: result[1].split('</literal>')[0],\n              algorithm: result[2].split('</literal>')[0]\n            };\n\n            for (let j = 0; j < this.state.evaluationMeasureList.length; j++) {\n              subList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.getDataFromQuery = () => {\n      var filterString = \"\";\n\n      for (let i = 0; i < this.state.selectedDatasets.length; i++) {\n        if (i === 0) filterString += 'Filter (?datasetLabel in (\"';else filterString += '\", \"';\n        filterString += this.state.selectedDatasets[i];\n        if (i === this.state.selectedDatasets.length - 1) filterString += '\")).';\n      }\n\n      for (let i = 0; i < this.state.selectedAlgorithms.length; i++) {\n        if (i === 0) filterString += 'Filter (?Algorithm in (\"';else filterString += '\", \"';\n        filterString += this.state.selectedAlgorithms[i];\n        if (i === this.state.selectedAlgorithms.length - 1) filterString += '\")).';\n      }\n\n      console.log(filterString);\n      var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\n\t\tWHERE {\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t${filterString}\n\t\t}\n\t\tGROUP BY ?datasetLabel ?Algorithm \n\t\t`;\n      console.log(query);\n      this.getRows(query);\n    };\n\n    this.state = {\n      spreadSheetRows: props.spreadSheetRows,\n      spreadSheetColumns: props.spreadSheetColumns,\n      selectedDatasets: props.selectedDatasets\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        spreadSheetRows: this.props.spreadSheetRows,\n        spreadSheetColumns: this.props.spreadSheetColumns\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 650,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: this.state.spreadSheetRows,\n        columns: this.state.spreadSheetColumns,\n        pageSize: 10,\n        rowsPerPageOptions: [10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PerformanceDataTable;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/PerformanceDataTable.jsx"],"names":["React","DataGrid","PerformanceDataTable","Component","constructor","props","getRows","query","columns","field","headerName","width","state","validationFolds","i","evaluationMeasureList","length","subColumn","push","list","req","encodeURIComponent","http","get","resp","data","on","chunk","split","result","subList","id","dataset","algorithm","j","setState","spreadSheetRows","spreadSheetColumns","err","console","log","getDataFromQuery","filterString","selectedDatasets","selectedAlgorithms","componentDidUpdate","prevProps","render","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nclass PerformanceDataTable extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            spreadSheetRows: props.spreadSheetRows,\r\n            spreadSheetColumns: props.spreadSheetColumns,\r\n            selectedDatasets: props.selectedDatasets,\r\n\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        if (prevProps !== this.props){\r\n            this.setState({\r\n                spreadSheetRows: this.props.spreadSheetRows,\r\n                spreadSheetColumns: this.props.spreadSheetColumns\r\n            })\r\n        }\r\n    }\r\n\r\n    getRows = (query) =>\r\n\t{\r\n\t// columns\r\n\tvar columns = [\r\n\t\t{ field: 'id', headerName: '', width: 20},\r\n\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t];\r\n\r\n\tif (!this.state.validationFolds)\r\n\t{\r\n\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t{\r\n\t\t\tvar subColumn = {\r\n\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t// rows\r\n\tvar list = [];\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\r\n\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\tdataset: result[1].split('</literal>')[0],\r\n\t\t\t\t\t\talgorithm: result[2].split('</literal>')[0],\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tfor (let j = 0; j < this.state.evaluationMeasureList.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\tspreadSheetColumns: columns\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery=()=>{\r\n\t\tvar filterString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?datasetLabel in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedDatasets[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedDatasets.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedAlgorithms.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?Algorithm in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedAlgorithms[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedAlgorithms.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\t\tconsole.log(filterString);\r\n\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\r\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\r\n\t\tWHERE {\r\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t${filterString}\r\n\t\t}\r\n\t\tGROUP BY ?datasetLabel ?Algorithm \r\n\t\t`\r\n\t\tconsole.log(query);\r\n\t\tthis.getRows(query)\r\n\t}\r\n\r\n    render()\r\n    {\r\n        return (\r\n            <div style={{ height: 650, width: '100%' }}>\r\n            <DataGrid\r\n                rows={this.state.spreadSheetRows}\r\n                columns={this.state.spreadSheetColumns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[10]}\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PerformanceDataTable;"]},"metadata":{},"sourceType":"module"}