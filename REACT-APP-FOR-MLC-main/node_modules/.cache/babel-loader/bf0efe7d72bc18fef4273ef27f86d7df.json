{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\PerformanceDataTable.jsx\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nclass PerformanceDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getColumnsAndRows = query => {\n      // columns\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (this.state.selectedEvaluationMeasures[0]['measure'] === '') {\n        if (!this.state.validationFolds) {\n          for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n            var subColumn = {\n              field: this.state.evaluationMeasureList[i],\n              width: 250\n            };\n            columns.push(subColumn);\n          }\n        }\n      } else {\n        if (!this.state.validationFolds) {\n          for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n            subColumn = {\n              field: this.state.selectedEvaluationMeasures[i]['measure'],\n              width: 250\n            };\n            columns.push(subColumn);\n          }\n        }\n      } // rows\n\n\n      var list = []; // post request\n\n      var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList = {\n              id: i,\n              dataset: result[1].split('</literal>')[0],\n              algorithm: result[2].split('</literal>')[0]\n            };\n\n            for (let j = 0; j < this.state.evaluationMeasureList.length; j++) {\n              subList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns,\n            loadingData: \"none\"\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.filterData = this.filterData.bind(this);\n    this.state = {\n      spreadSheetRows: [],\n      spreadSheetColumns: [],\n      selectedDatasets: props.selectedDatasets,\n      selectedAlgorithms: props.selectedAlgorithms,\n      selectedEvaluationMeasures: props.selectedEvaluationMeasures,\n      validationFolds: props.validationFolds,\n      evaluationMeasureList: [],\n      evaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\n      evaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\n      loadingData: \"flex\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.setFilter(this.filterData);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.evaluationMeasureList !== this.props.evaluationMeasureList) {\n      this.setState({\n        evaluationMeasureList: this.props.evaluationMeasureList\n      }, () => {\n        this.getDataFromQuery();\n      });\n    }\n  }\n\n  filterData() {\n    this.setState({\n      selectedDatasets: this.props.selectedDatasets,\n      selectedAlgorithms: this.props.selectedAlgorithms,\n      validationFolds: this.props.validationFolds,\n      selectedEvaluationMeasures: this.props.selectedEvaluationMeasures,\n      loadingData: \"flex\" //\tevaluationMeasureList: this.props.evaluationMeasureList\n\n    }, () => {\n      this.getDataFromQuery();\n    });\n  }\n\n  getDataFromQuery() {\n    var filterString = \"\";\n\n    for (let i = 0; i < this.state.selectedDatasets.length; i++) {\n      if (i === 0) filterString += 'Filter (?datasetLabel in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedDatasets[i];\n      if (i === this.state.selectedDatasets.length - 1) filterString += '\")).';\n    }\n\n    for (let i = 0; i < this.state.selectedAlgorithms.length; i++) {\n      if (i === 0) filterString += 'Filter (?Algorithm in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedAlgorithms[i];\n      if (i === this.state.selectedAlgorithms.length - 1) filterString += '\")).';\n    }\n\n    var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\n\t\tWHERE {\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t${filterString}\n\t\t}\n\t\tGROUP BY ?datasetLabel ?Algorithm \n\t\t`;\n    this.getColumnsAndRows(query);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: this.state.loadingData,\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex'\n          },\n          children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 650,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.spreadSheetRows,\n          columns: this.state.spreadSheetColumns,\n          pageSize: 10,\n          rowsPerPageOptions: [10]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default PerformanceDataTable;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/PerformanceDataTable.jsx"],"names":["React","DataGrid","CircularProgress","Box","http","require","PerformanceDataTable","Component","constructor","props","getColumnsAndRows","query","columns","field","headerName","width","state","selectedEvaluationMeasures","validationFolds","i","evaluationMeasureList","length","subColumn","push","list","req","encodeURIComponent","get","resp","data","on","chunk","split","result","subList","id","dataset","algorithm","j","setState","spreadSheetRows","spreadSheetColumns","loadingData","err","console","log","filterData","bind","selectedDatasets","selectedAlgorithms","evaluationMeasureListTrainTest","evaluationMeasureListFolds","componentDidMount","setFilter","componentDidUpdate","prevProps","getDataFromQuery","filterString","render","display","justifyContent","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\n\r\nconst http = require('http')\r\n\r\nclass PerformanceDataTable extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.filterData = this.filterData.bind(this);\r\n\r\n        this.state = {\r\n            spreadSheetRows: [],\r\n            spreadSheetColumns: [],\r\n\r\n            selectedDatasets: props.selectedDatasets,\r\n            selectedAlgorithms: props.selectedAlgorithms,\r\n            selectedEvaluationMeasures: props.selectedEvaluationMeasures,\r\n            validationFolds: props.validationFolds,\r\n\r\n\t\t\tevaluationMeasureList: [],\r\n\t\t\tevaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\r\n\t\t\tevaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\r\n\t\t\t\r\n\r\n\t\t\tloadingData: \"flex\"\r\n        };\r\n    }\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.props.setFilter(this.filterData)\r\n\t}\r\n\t\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        if (prevProps.evaluationMeasureList !== this.props.evaluationMeasureList){\r\n            this.setState({\r\n\t\t\t\tevaluationMeasureList: this.props.evaluationMeasureList\r\n            },() => {\r\n\t\t\t\tthis.getDataFromQuery()});\r\n        }\r\n    }\r\n\r\n\tfilterData()\r\n\t{\r\n        this.setState({\r\n            selectedDatasets: this.props.selectedDatasets,\r\n            selectedAlgorithms: this.props.selectedAlgorithms,\r\n            validationFolds: this.props.validationFolds,\r\n\t\t\tselectedEvaluationMeasures: this.props.selectedEvaluationMeasures,\r\n\t\t\tloadingData: \"flex\"\r\n\t\t//\tevaluationMeasureList: this.props.evaluationMeasureList\r\n    \t},() => {\r\n\t\t\tthis.getDataFromQuery()});\r\n        \r\n\t}\r\n\r\n    getColumnsAndRows = (query) =>\r\n\t{\r\n\t\t// columns\r\n\t\tvar columns = [\r\n\t\t\t{ field: 'id', headerName: '', width: 20},\r\n\t\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t\t];\r\n\r\n\t\tif (this.state.selectedEvaluationMeasures[0]['measure'] === '')\r\n\t\t{\r\n\t\t\tif (!this.state.validationFolds)\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar subColumn = {\r\n\t\t\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcolumns.push(subColumn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (!this.state.validationFolds)\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tsubColumn = {\r\n\t\t\t\t\t\tfield: this.state.selectedEvaluationMeasures[i]['measure'], width: 250\r\n\t\t\t\t\t};\r\n\t\t\t\t\tcolumns.push(subColumn);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// rows\r\n\t\tvar list = [];\r\n\t\t// post request\r\n\t\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\t\thttp.get(req, (resp) => {\r\n\t\t\tlet data = '';\r\n\t\t\t\r\n\t\t\t// A chunk of data has been received.\r\n\t\t\tresp.on('data', (chunk) => {\r\n\t\t\t\tdata += chunk;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// The whole response has been received. Print out the result.\r\n\t\t\tresp\r\n\t\t\t.on('end', () => {\r\n\t\t\t\t// extract the dataset names from html\r\n\t\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\r\n\t\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\t\tdataset: result[1].split('</literal>')[0],\r\n\t\t\t\t\t\t\talgorithm: result[2].split('</literal>')[0],\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tfor (let j = 0; j < this.state.evaluationMeasureList.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsubList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\t\tspreadSheetColumns: columns,\r\n\t\t\t\t\t\tloadingData: \"none\"\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.on(\"error\", (err) => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery(){\r\n\t\tvar filterString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?datasetLabel in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedDatasets[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedDatasets.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedAlgorithms.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?Algorithm in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedAlgorithms[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedAlgorithms.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\r\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\r\n\t\tWHERE {\r\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t${filterString}\r\n\t\t}\r\n\t\tGROUP BY ?datasetLabel ?Algorithm \r\n\t\t`\r\n\r\n\t\tthis.getColumnsAndRows(query)\r\n\t}\r\n\r\n    render()\r\n    {\r\n        return (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div style={{\r\n\t\t\t\tdisplay: this.state.loadingData,\r\n\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<Box sx={{ display: 'flex'}}>\r\n\t\t\t\t\t\t<CircularProgress/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</div>\r\n\r\n            <div style={{ height: 650, width: '100%' }}>\r\n            <DataGrid\r\n                rows={this.state.spreadSheetRows}\r\n                columns={this.state.spreadSheetColumns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[10]}\r\n            />\r\n            </div>\r\n\t\t\t</React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PerformanceDataTable;"]},"metadata":{},"sourceType":"module"}