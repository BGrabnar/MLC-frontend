{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\n\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nvar scatterAttrs = require('../scatter/attributes');\n\nvar baseAttrs = require('../../plots/attributes');\n\nvar lineAttrs = scatterAttrs.line;\nmodule.exports = {\n  mode: scatterAttrs.mode,\n  real: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the real component of the data, in units of normalized impedance', 'such that real=1, imag=0 is the center of the chart.'].join(' ')\n  },\n  imag: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the imaginary component of the data, in units of normalized impedance', 'such that real=1, imag=0 is the center of the chart.'].join(' ')\n  },\n  text: scatterAttrs.text,\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['real', 'imag', 'text']\n  }),\n  hovertext: scatterAttrs.hovertext,\n  line: {\n    color: lineAttrs.color,\n    width: lineAttrs.width,\n    dash: lineAttrs.dash,\n    shape: extendFlat({}, lineAttrs.shape, {\n      values: ['linear', 'spline']\n    }),\n    smoothing: lineAttrs.smoothing,\n    editType: 'calc'\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: scatterAttrs.marker,\n  cliponaxis: extendFlat({}, scatterAttrs.cliponaxis, {\n    dflt: false\n  }),\n  textposition: scatterAttrs.textposition,\n  textfont: scatterAttrs.textfont,\n  fill: extendFlat({}, scatterAttrs.fill, {\n    values: ['none', 'toself', 'tonext'],\n    dflt: 'none',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', 'scattersmith has a subset of the options available to scatter.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.', '*tonext* fills the space between two traces if one completely', 'encloses the other (eg consecutive contour lines), and behaves like', '*toself* if there is no trace before it. *tonext* should not be', 'used if one trace does not enclose the other.'].join(' ')\n  }),\n  fillcolor: scatterAttrs.fillcolor,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['real', 'imag', 'text', 'name']\n  }),\n  hoveron: scatterAttrs.hoveron,\n  hovertemplate: hovertemplateAttrs(),\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected\n};","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/node_modules/plotly.js/src/traces/scattersmith/attributes.js"],"names":["hovertemplateAttrs","require","texttemplateAttrs","extendFlat","scatterAttrs","baseAttrs","lineAttrs","line","module","exports","mode","real","valType","editType","description","join","imag","text","texttemplate","keys","hovertext","color","width","dash","shape","values","smoothing","connectgaps","marker","cliponaxis","dflt","textposition","textfont","fill","fillcolor","hoverinfo","flags","hoveron","hovertemplate","selected","unselected"],"mappings":"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","sourcesContent":["'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar scatterAttrs = require('../scatter/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar lineAttrs = scatterAttrs.line;\n\nmodule.exports = {\n    mode: scatterAttrs.mode,\n\n    real: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the real component of the data, in units of normalized impedance',\n            'such that real=1, imag=0 is the center of the chart.'\n        ].join(' ')\n    },\n\n    imag: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the imaginary component of the data, in units of normalized impedance',\n            'such that real=1, imag=0 is the center of the chart.'\n        ].join(' ')\n    },\n\n    text: scatterAttrs.text,\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: ['real', 'imag', 'text']\n    }),\n    hovertext: scatterAttrs.hovertext,\n\n    line: {\n        color: lineAttrs.color,\n        width: lineAttrs.width,\n        dash: lineAttrs.dash,\n        shape: extendFlat({}, lineAttrs.shape, {\n            values: ['linear', 'spline']\n        }),\n        smoothing: lineAttrs.smoothing,\n        editType: 'calc'\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: scatterAttrs.marker,\n    cliponaxis: extendFlat({}, scatterAttrs.cliponaxis, {dflt: false}),\n\n    textposition: scatterAttrs.textposition,\n    textfont: scatterAttrs.textfont,\n\n    fill: extendFlat({}, scatterAttrs.fill, {\n        values: ['none', 'toself', 'tonext'],\n        dflt: 'none',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            'scattersmith has a subset of the options available to scatter.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.',\n            '*tonext* fills the space between two traces if one completely',\n            'encloses the other (eg consecutive contour lines), and behaves like',\n            '*toself* if there is no trace before it. *tonext* should not be',\n            'used if one trace does not enclose the other.'\n        ].join(' ')\n    }),\n    fillcolor: scatterAttrs.fillcolor,\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['real', 'imag', 'text', 'name']\n    }),\n    hoveron: scatterAttrs.hoveron,\n    hovertemplate: hovertemplateAttrs(),\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected\n};\n"]},"metadata":{},"sourceType":"script"}