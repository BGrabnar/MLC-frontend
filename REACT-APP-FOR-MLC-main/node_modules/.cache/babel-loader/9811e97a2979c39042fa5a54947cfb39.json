{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajax\\\\Desktop\\\\Praksa\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { getList } from './utils.js'; //import Box from '@mui/material/Box';\n\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport Switch from '@mui/material/Switch';\nimport Card from '@mui/material/Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\n\t\t\tselect ?dataset_label\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\n\t\t\t}\n\t\t`;\n      getList(this.state.reqURL, query).then(value => {\n        this.setState({\n          datasetList: value\n        });\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      getList(this.state.reqURL, query).then(value => {\n        this.setState({\n          algorithmList: value\n        });\n      });\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvaluationMeasures: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: false,\n      disabledMeasures: [],\n      showFilters: 'none',\n      //reqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\", //change back\n      reqURL: \"http://localhost:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\n      datasetList: [],\n      algorithmList: [],\n      evaluationMeasureList: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\n      evaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\n      evaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadSheetColumns: [],\n      spreadSheetRows: [],\n      validationFolds: false,\n      selectedDatasets: [],\n      selectedAlgorithms: [],\n      selectedFold: [],\n      filterString: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setEvaluationHTMLElements();\n    this.getDatasets();\n    this.getAlgorithms();\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvaluationMeasures.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvaluationMeasures.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvaluationMeasures);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvaluationMeasures[i].id,\n            range: this.state.selectedEvaluationMeasures[i].range,\n            measure: this.state.selectedEvaluationMeasures[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures,\n            evaluationMeasureList: this.state.evaluationMeasureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvaluationMeasures[i].id),\n            disabled: this.state.selectedEvaluationMeasures.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvaluationMeasures[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      console.log(this.state.selectedEvaluationMeasures[i].measure === null);\n      console.log(this.state.selectedEvaluationMeasures[i].measure === '');\n      console.log(this.state.selectedEvaluationMeasures[i].range.length > 0);\n      console.log(!regex.test(this.state.selectedEvaluationMeasures[i].range));\n\n      if ((this.state.selectedEvaluationMeasures[i].measure === null || this.state.selectedEvaluationMeasures[i].measure === '') && this.state.selectedEvaluationMeasures[i].range.length > 0 || !regex.test(this.state.selectedEvaluationMeasures[i].range) && this.state.selectedEvaluationMeasures[i].range.length !== 0) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvaluationMeasures;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvaluationMeasures[this.state.selectedEvaluationMeasures.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvaluationMeasures);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      if (this.state.selectedEvaluationMeasures[i].id !== x) newSelectedEvals.push(this.state.selectedEvaluationMeasures[i]);\n    }\n\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvaluationMeasures);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Switch, {\n            onChange: value => {\n              if (value.target.checked === true) {\n                this.setState({\n                  showFilters: ''\n                });\n              } else {\n                this.setState({\n                  showFilters: 'none'\n                });\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 7\n          }, this),\n          label: \"Filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          children: \"CSV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        direction: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            display: this.state.showFilters,\n            m: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 0,\n            children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n            , {\n              multiple: true,\n              limitTags: 50,\n              options: this.state.datasetList,\n              sx: {\n                width: 300,\n                m: 1\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                variant: \"outlined\",\n                label: \"Datasets\",\n                color: \"secondary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 10\n              }, this),\n              onChange: (event, value) => {\n                this.setState({\n                  selectedDatasets: value\n                });\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n            , {\n              defaultValue: \"train / test\",\n              onChange: (event, value) => {\n                if (value === \"folds\") {\n                  this.setState({\n                    foldsAutocompleteDisplayMode: \"\",\n                    validationFolds: true,\n                    evaluationMeasureList: this.state.evaluationMeasureListFolds\n                  }, () => {\n                    this.setEvaluationHTMLElements();\n                  });\n                } else {\n                  this.setState({\n                    foldsAutocompleteDisplayMode: \"none\",\n                    validationFolds: false,\n                    evaluationMeasureList: this.state.evaluationMeasureListTrainTest\n                  }, () => {\n                    this.setEvaluationHTMLElements();\n                  });\n                }\n              },\n              multiple: false,\n              limitTags: 2,\n              options: [\"folds\", \"train / test\"],\n              sx: {\n                width: 300,\n                m: 1\n              },\n              renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n                variant: \"outlined\",\n                label: \"Validation\",\n                color: \"secondary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n          , {\n            multiple: true,\n            limitTags: 3,\n            options: this.state.algorithmList,\n            sx: {\n              width: 300,\n              m: 1\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              variant: \"outlined\",\n              label: \"Methods\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 9\n            }, this),\n            onChange: (event, value) => {\n              this.setState({\n                selectedAlgorithms: value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n          , {\n            multiple: true,\n            limitTags: 50,\n            options: [\"1\", \"2\", \"3\"],\n            sx: {\n              width: 300,\n              display: this.state.foldsAutocompleteDisplayMode,\n              m: 1\n            },\n            renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n              variant: \"outlined\",\n              label: \"Fold\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 9\n            }, this),\n            onChange: (event, value) => {\n              this.setState({\n                selectedFold: value\n              });\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 7\n          }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            sx: {\n              m: 1\n            },\n            onClick: this.handleAdd,\n            disabled: false // before: this.state.addButtonDisabled\n            ,\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n          , {\n            color: \"secondary\",\n            variant: \"contained\",\n            sx: {\n              m: 1\n            },\n            onClick: () => this.callPerformanceDataTableMethod(),\n            disabled: this.state.addButtonDisabled,\n            children: \"SEARCH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PerformanceDataTable, {\n        setFilter: click => this.callPerformanceDataTableMethod = click,\n        selectedDatasets: this.state.selectedDatasets,\n        selectedAlgorithms: this.state.selectedAlgorithms,\n        selectedFold: this.state.selectedFold,\n        evaluationMeasureList: this.state.evaluationMeasureList,\n        validationFolds: this.state.validationFolds,\n        selectedEvaluationMeasures: this.state.selectedEvaluationMeasures\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","PerformanceDataTable","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","getList","FormControlLabel","Switch","Card","Body","Component","constructor","props","getDatasets","query","state","reqURL","then","value","setState","datasetList","getAlgorithms","algorithmList","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","evaluationHTMLElements","selectedEvaluationMeasures","addButtonDisabled","disabledMeasures","showFilters","evaluationMeasureList","evaluationMeasureListTrainTest","evaluationMeasureListFolds","foldsAutocompleteDisplayMode","spreadSheetColumns","spreadSheetRows","validationFolds","selectedDatasets","selectedAlgorithms","selectedFold","filterString","componentDidMount","setEvaluationHTMLElements","val","id","newSelectedEvals","forEach","el","measure","push","setDisabledMeasures","range","console","log","evals","i","length","newDisabledMeasures","regex","RegExp","test","x","render","target","checked","display","m","width","params","event","callPerformanceDataTableMethod","click"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\nimport {getList} from './utils.js'\r\n//import Box from '@mui/material/Box';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Switch from '@mui/material/Switch';\r\nimport Card from '@mui/material/Card';\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n\t\t\tselectedEvaluationMeasures: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: false,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\tshowFilters: 'none',\r\n\t\t\t//reqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\", //change back\r\n\t\t\treqURL: \"http://localhost:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tevaluationMeasureList: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\r\n\t\t\tevaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\r\n\t\t\tevaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\r\n\t\t\t\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: [],\r\n\t\t\tvalidationFolds: false,\r\n\t\t\tselectedDatasets: [],\r\n\t\t\tselectedAlgorithms: [],\r\n\t\t\tselectedFold: [],\r\n\t\t\tfilterString: \"\"\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\r\n\t\t\tselect ?dataset_label\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\r\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\r\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tgetList(this.state.reqURL, query).then((value) => {this.setState({datasetList: value})});\r\n\t}\r\n\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tgetList(this.state.reqURL, query).then((value) => {this.setState({algorithmList: value})});\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvaluationMeasures.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvaluationMeasures.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvaluationMeasures[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvaluationMeasures[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvaluationMeasures[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t\tevaluationMeasureList ={this.state.evaluationMeasureList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvaluationMeasures[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvaluationMeasures.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvaluationMeasures[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures[i].measure === null)\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures[i].measure === '')\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures[i].range.length > 0)\r\n\t\t\tconsole.log(!regex.test(this.state.selectedEvaluationMeasures[i].range))\r\n\r\n\t\t\tif (((this.state.selectedEvaluationMeasures[i].measure === null || this.state.selectedEvaluationMeasures[i].measure === '') && this.state.selectedEvaluationMeasures[i].range.length > 0)  ||\r\n\t\t\t//if(this.state.selectedEvaluationMeasures[i].measure===null ||\r\n\t\t\t\t//this.state.selectedEvaluationMeasures[i].measure==='' ||\r\n\t\t\t\t//this.state.selectedEvaluationMeasures.length>10 ||\r\n\t\t\t\t//this.state.selectedEvaluationMeasures[i].range==='' ||\r\n\t\t\t\t(!regex.test(this.state.selectedEvaluationMeasures[i].range) &&  this.state.selectedEvaluationMeasures[i].range.length !== 0))\r\n\t\t\t{\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvaluationMeasures\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvaluationMeasures[this.state.selectedEvaluationMeasures.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tif(this.state.selectedEvaluationMeasures[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvaluationMeasures[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<FormControlLabel control={\r\n\t\t\t\t\t\t<Switch \r\n\t\t\t\t\t\tonChange= {(value) => {\r\n\t\t\t\t\t\t\tif (value.target.checked === true)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({showFilters: ''})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t\tthis.setState({showFilters: 'none'})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>} label=\"Filters\" />\r\n\r\n\t\t\t\t\t<Button>\r\n\t\t\t\t\t\tCSV\r\n\t\t\t\t\t</Button>\r\n    \t\t\t</div>\r\n\r\n\t\t\t\t<Grid\r\n\t\t\t\t\tcontainer\r\n\t\t\t\t\tspacing={0}\r\n\t\t\t\t\tdirection=\"column\"\r\n\t\t\t\t\talignItems=\"center\"\r\n\t\t\t\t\tjustifyContent=\"center\"\r\n\t\t\t\t>\r\n\r\n\t\t\t\t\t<Card sx={{display: this.state.showFilters,\r\n\t\t\t\t\t\tm: 2\r\n\t\t\t\t\t}}>\r\n\t\t\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\t\t\tsx={{width: 300, m: 1}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\t\t\tthis.setState({selectedDatasets : value});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\t\t\t\tfoldsAutocompleteDisplayMode : \"\",\r\n\t\t\t\t\t\t\t\t\t\t\tvalidationFolds: true,\r\n\t\t\t\t\t\t\t\t\t\t\tevaluationMeasureList: this.state.evaluationMeasureListFolds\r\n\t\t\t\t\t\t\t\t\t\t},()=> {this.setEvaluationHTMLElements()});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\t\t\t\tfoldsAutocompleteDisplayMode : \"none\",\r\n\t\t\t\t\t\t\t\t\t\t\tvalidationFolds: false,\r\n\t\t\t\t\t\t\t\t\t\t\tevaluationMeasureList: this.state.evaluationMeasureListTrainTest\r\n\t\t\t\t\t\t\t\t\t\t},()=> {this.setEvaluationHTMLElements()});\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\t\t\tsx={{width: 300, m: 1}}\r\n\t\t\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\t\t\tsx={{width: 300, m: 1}}\r\n\t\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\t\tthis.setState({selectedAlgorithms : value});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode, m: 1}}\r\n\t\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t\t\t}\t\r\n\t\t\t\t\t\t\tonChange={(event, value) =>{\r\n\t\t\t\t\t\t\t\tthis.setState({selectedFold: value});\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t\t\t<Button variant='contained'\r\n\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\tsx = {{m : 1}}\r\n\t\t\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<AddIcon />\r\n\t\t\t\t\t\t</Button>\r\n\r\n\t\t\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\tsx = {{m : 1}}\r\n\t\t\t\t\t\tonClick={() => this.callPerformanceDataTableMethod()}\r\n\t\t\t\t\t\tdisabled={this.state.addButtonDisabled} \r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tSEARCH\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<PerformanceDataTable\r\n\t\t\t\t\tsetFilter={click => this.callPerformanceDataTableMethod = click}\r\n\t\t\t\t\tselectedDatasets = {this.state.selectedDatasets}\r\n\t\t\t\t\tselectedAlgorithms = {this.state.selectedAlgorithms}\r\n\t\t\t\t\tselectedFold = {this.state.selectedFold}\r\n\t\t\t\t\tevaluationMeasureList = {this.state.evaluationMeasureList}\r\n\t\t\t\t\tvalidationFolds = {this.state.validationFolds}\r\n\t\t\t\t\tselectedEvaluationMeasures = {this.state.selectedEvaluationMeasures}\r\n\t\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}