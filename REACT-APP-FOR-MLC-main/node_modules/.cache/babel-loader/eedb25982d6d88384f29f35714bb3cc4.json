{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\PerformanceDataTable.jsx\";\nimport React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nclass PerformanceDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getColumnsAndRows = query => {\n      // columns\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (!this.state.validationFolds) {\n        console.log(this.state.evaluationMeasureList);\n        console.log(this.state.evaluationMeasureList.length);\n\n        for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n          var subColumn = {\n            field: this.state.evaluationMeasureList[i],\n            width: 250\n          };\n          columns.push(subColumn);\n        }\n      } // rows\n\n\n      var list = []; // post request\n\n      var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList = {\n              id: i,\n              dataset: result[1].split('</literal>')[0],\n              algorithm: result[2].split('</literal>')[0]\n            };\n\n            for (let j = 0; j < this.state.evaluationMeasureList.length; j++) {\n              subList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.getDataFromQuery = this.getDataFromQuery.bind(this);\n    this.state = {\n      spreadSheetRows: [],\n      spreadSheetColumns: [],\n      selectedDatasets: props.selectedDatasets,\n      selectedAlgorithms: props.selectedAlgorithms,\n      selectedEvaluationMeasures: [],\n      evaluationMeasureList: props.evaluationMeasureList,\n      // for now, remove later\n      validationFolds: props.validationFolds\n    };\n  }\n\n  componentDidMount() {\n    this.props.setFilter(this.getDataFromQuery);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        selectedDatasets: this.props.selectedDatasets,\n        selectedAlgorithms: this.props.selectedAlgorithms,\n        validationFolds: this.props.validationFolds,\n        evaluationMeasureList: this.props.evaluationMeasureList\n      }, () => {\n        this.getDataFromQuery();\n      });\n    }\n  }\n\n  getDataFromQuery() {\n    var filterString = \"\";\n\n    for (let i = 0; i < this.state.selectedDatasets.length; i++) {\n      if (i === 0) filterString += 'Filter (?datasetLabel in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedDatasets[i];\n      if (i === this.state.selectedDatasets.length - 1) filterString += '\")).';\n    }\n\n    for (let i = 0; i < this.state.selectedAlgorithms.length; i++) {\n      if (i === 0) filterString += 'Filter (?Algorithm in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedAlgorithms[i];\n      if (i === this.state.selectedAlgorithms.length - 1) filterString += '\")).';\n    }\n\n    var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\n\t\tWHERE {\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t${filterString}\n\t\t}\n\t\tGROUP BY ?datasetLabel ?Algorithm \n\t\t`;\n    this.getColumnsAndRows(query);\n  }\n\n  render() {\n    console.log(\"Table render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 650,\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(DataGrid, {\n        rows: this.state.spreadSheetRows,\n        columns: this.state.spreadSheetColumns,\n        pageSize: 10,\n        rowsPerPageOptions: [10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PerformanceDataTable;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/PerformanceDataTable.jsx"],"names":["React","DataGrid","http","require","PerformanceDataTable","Component","constructor","props","getColumnsAndRows","query","columns","field","headerName","width","state","validationFolds","console","log","evaluationMeasureList","length","i","subColumn","push","list","req","encodeURIComponent","get","resp","data","on","chunk","split","result","subList","id","dataset","algorithm","j","setState","spreadSheetRows","spreadSheetColumns","err","getDataFromQuery","bind","selectedDatasets","selectedAlgorithms","selectedEvaluationMeasures","componentDidMount","setFilter","componentDidUpdate","prevProps","filterString","render","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\n\r\nconst http = require('http')\r\n\r\nclass PerformanceDataTable extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDataFromQuery = this.getDataFromQuery.bind(this);\r\n\r\n        this.state = {\r\n            spreadSheetRows: [],\r\n            spreadSheetColumns: [],\r\n\r\n            selectedDatasets: props.selectedDatasets,\r\n            selectedAlgorithms: props.selectedAlgorithms,\r\n            selectedEvaluationMeasures: [],\r\n            evaluationMeasureList: props.evaluationMeasureList, // for now, remove later\r\n            validationFolds: props.validationFolds\r\n        };\r\n    }\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.props.setFilter(this.getDataFromQuery)\r\n\t}\r\n\t\r\n    componentDidUpdate(prevProps)\r\n    {\r\n        if (prevProps !== this.props){\r\n            this.setState({\r\n                selectedDatasets: this.props.selectedDatasets,\r\n                selectedAlgorithms: this.props.selectedAlgorithms,\r\n                validationFolds: this.props.validationFolds,\r\n\t\t\t\tevaluationMeasureList: this.props.evaluationMeasureList\r\n            },() => {\r\n\t\t\t\tthis.getDataFromQuery()});\r\n        }\r\n    }\r\n\r\n    getColumnsAndRows = (query) =>\r\n\t{\r\n\t// columns\r\n\tvar columns = [\r\n\t\t{ field: 'id', headerName: '', width: 20},\r\n\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t];\r\n\r\n\tif (!this.state.validationFolds)\r\n\t{\r\n\t\tconsole.log(this.state.evaluationMeasureList);\r\n\t\tconsole.log(this.state.evaluationMeasureList.length);\r\n\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t{\r\n\t\t\tvar subColumn = {\r\n\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t// rows\r\n\tvar list = [];\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\r\n\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\tdataset: result[1].split('</literal>')[0],\r\n\t\t\t\t\t\talgorithm: result[2].split('</literal>')[0],\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tfor (let j = 0; j < this.state.evaluationMeasureList.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\tspreadSheetColumns: columns\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery(){\r\n\t\tvar filterString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?datasetLabel in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedDatasets[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedDatasets.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedAlgorithms.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?Algorithm in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedAlgorithms[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedAlgorithms.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\r\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\r\n\t\tWHERE {\r\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t${filterString}\r\n\t\t}\r\n\t\tGROUP BY ?datasetLabel ?Algorithm \r\n\t\t`\r\n\r\n\t\tthis.getColumnsAndRows(query)\r\n\t}\r\n\r\n    render()\r\n    {\r\n\t\tconsole.log(\"Table render\")\r\n        return (\r\n            <div style={{ height: 650, width: '100%' }}>\r\n            <DataGrid\r\n                rows={this.state.spreadSheetRows}\r\n                columns={this.state.spreadSheetColumns}\r\n                pageSize={10}\r\n                rowsPerPageOptions={[10]}\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PerformanceDataTable;"]},"metadata":{},"sourceType":"module"}