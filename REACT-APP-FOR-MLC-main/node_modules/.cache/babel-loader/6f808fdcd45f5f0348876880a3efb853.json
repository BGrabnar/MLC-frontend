{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { getList } from './utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getListEvaluations = (reqURL, query) => {\n      var list = []; // post request\n\n      var req = reqURL + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 0; i < data.split('<literal>').length; i++) {\n            list[i] = data.split('<literal>')[i].split('</literal>')[0];\n          }\n\n          list.shift();\n          list.sort((a, b) => a.localeCompare(b, undefined, {\n            sensitivity: 'base'\n          })); // sort\n\n          this.setState({\n            evaluationMeasureList: list\n          }, () => {\n            this.setEvaluationHTMLElements();\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      }); // return list;\n    };\n\n    this.getDatasets = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\n\t\t\tselect ?dataset_label\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\n\t\t\t}\n\t\t`;\n      getList(this.state.reqURL, query).then(value => this.state({\n        datasetList: value\n      }));\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      this.setState({\n        algorithmList: getList(this.state.reqURL, query)\n      });\n    };\n\n    this.getEvaluationMeasureList = () => {\n      var query = `\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\n\t\t\tselect distinct ?measure_label {\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\n\t\t\t?measure rdfs:label ?measure_label .\n\t\t\tFILTER NOT EXISTS{\n\t\t\t?m rdfs:subClassOf ?measure \n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\n\t\t\t}\n\t\t\t}\n\t\t`; // this.setState({\n      // \tevaluationMeasureList: getList(this.state.reqURL, query)\n      // }, ()=>{\n      // \tconsole.log(\"evaluations loaded\")\n      // \tconsole.log(this.state.evaluationMeasureList)\n      // \tthis.setEvaluationHTMLElements()\n      // })\n\n      this.getListEvaluations(this.state.reqURL, query);\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvals: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      reqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\n      datasetList: [],\n      algorithmList: [],\n      evaluationMeasureList: [],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadSheetColumns: [],\n      spreadSheetRows: [],\n      validationFolds: false,\n      selectedDatasets: [],\n      selectedAlgorithms: [],\n      filterString: \"\"\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"Filter updated\");\n    this.getEvaluationMeasureList(); // this.setEvaluationHTMLElements()\n\n    this.getDatasets();\n    this.getAlgorithms();\n  } // gets the query and retuns the list of data from the query\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvals);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvals[i].id,\n            range: this.state.selectedEvals[i].range,\n            measure: this.state.selectedEvals[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures,\n            evaluationMeasureList: this.state.evaluationMeasureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvals[i].id),\n            disabled: this.state.selectedEvals.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvals[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].measure === null || this.state.selectedEvals[i].measure === '' || this.state.selectedEvals.length > 10 || this.state.selectedEvals[i].range === '' || !regex.test(this.state.selectedEvals[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvals;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvals[this.state.selectedEvals.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].id !== x) newSelectedEvals.push(this.state.selectedEvals[i]);\n    }\n\n    this.setState({\n      selectedEvals: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 8\n          }, this),\n          onChange: (event, value) => {\n            this.setState({\n              selectedDatasets: value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\"\n              });\n              this.setState({\n                validationFolds: true\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\"\n              });\n              this.setState({\n                validationFolds: false\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Validation\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 7\n        }, this),\n        onChange: (event, value) => {\n          this.setState({\n            selectedAlgorithms: value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: () => this.callPerformanceDataTableMethod(),\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PerformanceDataTable, {\n        setFilter: click => this.callPerformanceDataTableMethod = click,\n        selectedDatasets: this.state.selectedDatasets,\n        selectedAlgorithms: this.state.selectedAlgorithms,\n        evaluationMeasureList: this.state.evaluationMeasureList,\n        validationFolds: this.state.validationFolds\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","PerformanceDataTable","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","getList","http","require","Body","Component","constructor","props","getListEvaluations","reqURL","query","list","req","encodeURIComponent","get","resp","data","on","chunk","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","setState","evaluationMeasureList","setEvaluationHTMLElements","err","console","log","getDatasets","state","then","value","datasetList","getAlgorithms","algorithmList","getEvaluationMeasureList","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","evaluationHTMLElements","selectedEvals","addButtonDisabled","disabledMeasures","foldsAutocompleteDisplayMode","spreadSheetColumns","spreadSheetRows","validationFolds","selectedDatasets","selectedAlgorithms","filterString","componentDidMount","val","id","newSelectedEvals","forEach","el","measure","push","setDisabledMeasures","range","evals","newDisabledMeasures","regex","RegExp","test","x","render","width","params","event","display","callPerformanceDataTableMethod","click"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\nimport {getList} from './utils.js'\r\nconst http = require('http')\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n      \t\tselectedEvals: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\treqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tevaluationMeasureList: [],\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: [],\r\n\t\t\tvalidationFolds: false,\r\n\t\t\tselectedDatasets: [],\r\n\t\t\tselectedAlgorithms: [],\r\n\t\t\tfilterString: \"\"\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconsole.log(\"Filter updated\")\r\n\t\tthis.getEvaluationMeasureList()\r\n\t\t// this.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t}\r\n\r\n\t// gets the query and retuns the list of data from the query\r\n  getListEvaluations = (reqURL ,query) =>\r\n{ \r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = reqURL+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'})); // sort\r\n\t\t\tthis.setState({\r\n\t\t\t\tevaluationMeasureList: list\r\n\t\t\t}, ()=>{\r\n\t\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\t})\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\t// return list;\r\n}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\r\n\t\t\tselect ?dataset_label\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\r\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\r\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\r\n\t\t\t}\r\n\t\t`\r\n\t\t\r\n\t\tgetList(this.state.reqURL, query).then((value) => this.state({datasetList: value}));\r\n\t}\r\n\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\talgorithmList: getList(this.state.reqURL, query)\r\n\t\t})\r\n\t}\r\n\r\n\tgetEvaluationMeasureList=() => {\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n\r\n\t\t\tselect distinct ?measure_label {\r\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\r\n\t\t\t?measure rdfs:label ?measure_label .\r\n\t\t\tFILTER NOT EXISTS{\r\n\t\t\t?m rdfs:subClassOf ?measure \r\n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\t// this.setState({\r\n\t\t// \tevaluationMeasureList: getList(this.state.reqURL, query)\r\n\t\t// }, ()=>{\r\n\t\t// \tconsole.log(\"evaluations loaded\")\r\n\t\t// \tconsole.log(this.state.evaluationMeasureList)\r\n\t\t// \tthis.setEvaluationHTMLElements()\r\n\t\t// })\r\n\t\tthis.getListEvaluations(this.state.reqURL, query)\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvals)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvals[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvals[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvals[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t\tevaluationMeasureList ={this.state.evaluationMeasureList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvals[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvals.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvals[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvals[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvals.length>10 ||\r\n\t\t\t\tthis.state.selectedEvals[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvals[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvals\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvals[this.state.selectedEvals.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvals[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tthis.setState({selectedDatasets : value});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: true});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"none\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: false});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\tthis.setState({selectedAlgorithms : value});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={() => this.callPerformanceDataTableMethod()}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t{/* <div style={{ height: 400, width: '100%' }}>\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t/>\r\n\t\t\t\t</div> */}\r\n\r\n\t\t\t\t<PerformanceDataTable\r\n\t\t\t\t\tsetFilter={click => this.callPerformanceDataTableMethod = click}\r\n\t\t\t\t\tselectedDatasets = {this.state.selectedDatasets}\r\n\t\t\t\t\tselectedAlgorithms = {this.state.selectedAlgorithms}\r\n\t\t\t\t\tevaluationMeasureList = {this.state.evaluationMeasureList}\r\n\t\t\t\t\tvalidationFolds = {this.state.validationFolds}\r\n\t\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}