{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nconst neaf = EvaluationMeasureRange.evaluationMeasureList;\nconsole.log(neaf); // gets the query and retuns the list of data from the query\n\nexport function getList(query, type) {\n  var list = []; // post request\n\n  var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n  http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      for (let i = 0; i < data.split('<literal>').length; i++) {\n        if (type === \"datasets\") {\n          list[i] = data.split('<literal>')[i].split('.arff')[0];\n        } else {\n          list[i] = data.split('<literal>')[i].split('</literal>')[0];\n        }\n      }\n\n      list.shift();\n      list.sort((a, b) => a.localeCompare(b, undefined, {\n        sensitivity: 'base'\n      }));\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\n\t\tselect ?dataset_label\n\t\twhere {\n\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t?dataset rdfs:label ?dataset_label .\n\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\n\t\t}\n\t\t`;\n      this.setState({\n        datasetList: getList(query, \"datasets\")\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      this.setState({\n        algorithmList: getList(query, \"algorithms\")\n      });\n    };\n\n    this.getEvaluationMeasureList = () => {\n      var query = `\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\n\t\t\tselect distinct ?measure_label {\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\n\t\t\t?measure rdfs:label ?measure_label .\n\t\t\tFILTER NOT EXISTS{\n\t\t\t?m rdfs:subClassOf ?measure \n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\n\t\t\t}\n\t\t\t}\n\t`;\n      this.setState({\n        evaluationMeasureList: getList(query, \"evaluationMeasures\")\n      });\n    };\n\n    this.getRows = query => {\n      // columns\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (!this.state.validationFolds) {\n        for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n          var subColumn = {\n            field: this.state.evaluationMeasureList[i],\n            width: 250\n          };\n          columns.push(subColumn);\n        }\n      } // rows\n\n\n      var list = []; // post request\n\n      var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList;\n\n            if (result[1].split('</literal>')[0].split('_').length === 5) {\n              subList = {\n                id: i,\n                dataset: result[1].split('</literal>')[0].split('_')[0],\n                algorithm: result[1].split('</literal>')[0].split('_')[1],\n                AUPRC: result[2].split('</literal>')[0]\n              };\n            } else {\n              subList = {\n                id: i,\n                dataset: result[1].split('</literal>')[0].split('_')[0] + \"_\" + result[1].split('</literal>')[0].split('_')[1],\n                algorithm: result[1].split('</literal>')[0].split('_')[2],\n                AUPRC: result[2].split('</literal>')[0]\n              };\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.getDataFromQuery = () => {\n      var datasetString = \"\";\n\n      for (let i = 0; i < this.state.selectedDatasets.length; i++) {\n        if (i === 0) datasetString += ' && ';else datasetString += ' || ';\n        datasetString += 'regex(?dataset_label, \"' + this.state.selectedDatasets[i] + '\")';\n        console.log(i);\n      }\n\n      console.log(datasetString);\n      var query = `\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\t\tselect ?dataset_label ?value\n\t\twhere {\n\t\t?dataset <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t?dataset rdfs:label ?dataset_label .\n\t\tFILTER (!regex(?dataset_label, \"cost\") && regex(?dataset_label, \"_BR_\") && regex(?dataset_label, \"AUPRC\")\n\t\t${datasetString} ).\n\t\t}\n\t\t`;\n      console.log(query);\n      this.getRows(query);\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvals: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      datasetList: [],\n      algorithmList: [],\n      evaluationMeasureList: [],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadSheetColumns: [],\n      spreadSheetRows: [],\n      validationFolds: false,\n      selectedDatasets: [],\n      selectedAlgorithms: []\n    };\n  }\n\n  componentDidMount() {\n    this.setEvaluationHTMLElements();\n    this.getDatasets();\n    this.getAlgorithms();\n    this.getEvaluationMeasureList();\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvals);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvals[i].id,\n            range: this.state.selectedEvals[i].range,\n            measure: this.state.selectedEvals[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvals[i].id),\n            disabled: this.state.selectedEvals.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvals[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].measure === null || this.state.selectedEvals[i].measure === '' || this.state.selectedEvals.length > 10 || this.state.selectedEvals[i].range === '' || !regex.test(this.state.selectedEvals[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvals;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvals[this.state.selectedEvals.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].id !== x) newSelectedEvals.push(this.state.selectedEvals[i]);\n    }\n\n    this.setState({\n      selectedEvals: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 8\n          }, this),\n          onChange: (event, value) => {\n            this.state.selectedDatasets = value;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\"\n              });\n              this.setState({\n                validationFolds: true\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\"\n              });\n              this.setState({\n                validationFolds: false\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Validation\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: this.getDataFromQuery,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.spreadSheetRows,\n          columns: this.state.spreadSheetColumns,\n          pageSize: 10,\n          rowsPerPageOptions: [10]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","DataGrid","http","require","neaf","evaluationMeasureList","console","log","getList","query","type","list","req","encodeURIComponent","get","resp","data","on","chunk","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","err","Body","Component","constructor","props","getDatasets","setState","datasetList","getAlgorithms","algorithmList","getEvaluationMeasureList","getRows","columns","field","headerName","width","state","validationFolds","subColumn","push","result","subList","id","dataset","algorithm","AUPRC","spreadSheetRows","spreadSheetColumns","getDataFromQuery","datasetString","selectedDatasets","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","evaluationHTMLElements","selectedEvals","addButtonDisabled","disabledMeasures","foldsAutocompleteDisplayMode","selectedAlgorithms","componentDidMount","setEvaluationHTMLElements","val","newSelectedEvals","forEach","el","measure","setDisabledMeasures","range","evals","newDisabledMeasures","regex","RegExp","test","x","render","params","event","value","display","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\n\r\nconst http = require('http')\r\n\r\nconst neaf = EvaluationMeasureRange.evaluationMeasureList;\r\n\tconsole.log(neaf);\r\n\r\n// gets the query and retuns the list of data from the query\r\nexport function getList(query, type)\r\n{\r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tif (type === \"datasets\")\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('.arff')[0];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\r\n\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\treturn list;\r\n}\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n      \t\tselectedEvals: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tevaluationMeasureList: [],\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: [],\r\n\t\t\tvalidationFolds: false,\r\n\t\t\tselectedDatasets: [],\r\n\t\t\tselectedAlgorithms: []\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t\tthis.getEvaluationMeasureList()\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\r\n\t\tselect ?dataset_label\r\n\t\twhere {\r\n\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t?dataset rdfs:label ?dataset_label .\r\n\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\r\n\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\tdatasetList: getList(query, \"datasets\")\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\talgorithmList: getList(query, \"algorithms\")\r\n\t\t})\r\n\t}\r\n\r\n\tgetEvaluationMeasureList=() => {\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n\r\n\t\t\tselect distinct ?measure_label {\r\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\r\n\t\t\t?measure rdfs:label ?measure_label .\r\n\t\t\tFILTER NOT EXISTS{\r\n\t\t\t?m rdfs:subClassOf ?measure \r\n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\r\n\t\t\t}\r\n\t\t\t}\r\n\t`\r\n\r\n\tthis.setState({\r\n\t\tevaluationMeasureList: getList(query, \"evaluationMeasures\")\r\n\t})\r\n\t}\r\n\r\n\tgetRows = (query) =>\r\n\t{\r\n\t// columns\r\n\tvar columns = [\r\n\t\t{ field: 'id', headerName: '', width: 20 },\r\n\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t];\r\n\r\n\tif (!this.state.validationFolds)\r\n\t{\r\n\r\n\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t{\r\n\t\t\tvar subColumn = {\r\n\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t// rows\r\n\tvar list = [];\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\t\t\t\t\tvar subList;\r\n\t\t\t\t\tif (result[1].split('</literal>')[0].split('_').length === 5)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList = {\r\n\t\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\t\tdataset: result[1].split('</literal>')[0].split('_')[0],\r\n\t\t\t\t\t\t\talgorithm: result[1].split('</literal>')[0].split('_')[1],\r\n\t\t\t\t\t\t\tAUPRC: result[2].split('</literal>')[0]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList = {\r\n\t\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\t\tdataset: result[1].split('</literal>')[0].split('_')[0] + \"_\" + result[1].split('</literal>')[0].split('_')[1],\r\n\t\t\t\t\t\t\talgorithm: result[1].split('</literal>')[0].split('_')[2],\r\n\t\t\t\t\t\t\tAUPRC: result[2].split('</literal>')[0]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\tspreadSheetColumns: columns\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery=()=>{\r\n\t\tvar datasetString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tdatasetString += ' && '\r\n\t\t\telse\r\n\t\t\t\tdatasetString += ' || '\r\n\t\t\tdatasetString += 'regex(?dataset_label, \"'+ this.state.selectedDatasets[i] +'\")';\r\n\t\t\tconsole.log(i);\r\n\t\t}\r\n\t\tconsole.log(datasetString);\r\n\r\n\t\tvar query = `\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\r\n\t\tselect ?dataset_label ?value\r\n\t\twhere {\r\n\t\t?dataset <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t?dataset rdfs:label ?dataset_label .\r\n\t\tFILTER (!regex(?dataset_label, \"cost\") && regex(?dataset_label, \"_BR_\") && regex(?dataset_label, \"AUPRC\")\r\n\t\t${datasetString} ).\r\n\t\t}\r\n\t\t`\r\n\t\tconsole.log(query);\r\n\t\tthis.getRows(query)\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvals)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvals[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvals[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvals[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvals[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvals.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvals[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvals[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvals.length>10 ||\r\n\t\t\t\tthis.state.selectedEvals[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvals[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvals\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvals[this.state.selectedEvals.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvals[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tthis.state.selectedDatasets = value;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: true});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"none\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: false});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={this.getDataFromQuery}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t<div style={{ height: 400, width: '100%' }}>\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}