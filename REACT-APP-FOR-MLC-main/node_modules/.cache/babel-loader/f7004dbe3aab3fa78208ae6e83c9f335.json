{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\EvaluationMeasureRange.jsx\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EvaluationMeasureRange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMeasure = this.handleMeasure.bind(this);\n    this.handleRange = this.handleRange.bind(this);\n    this.handleMeasureError = this.handleMeasureError.bind(this);\n    this.handleRangeError = this.handleRangeError.bind(this);\n    this.state = {\n      selectedMeasure: props.measure,\n      selectedRange: props.range,\n      measureError: false,\n      rangeError: false,\n      disabledMeasures: props.disabledMeasures,\n      evaluationMeasureList: [],\n      evaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\n      evaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy']\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"ja?\");\n    this.setState({\n      selectedMeasure: this.props.measure,\n      selectedRange: this.props.range,\n      disabledMeasures: this.props.disabledMeasures,\n      evaluationMeasureList: this.props.evaluationMeasureList\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    console.log(this.props.evaluationMeasureList);\n    console.log(\"??????\");\n\n    if (prevProps !== this.props) {\n      console.log(\"updated\");\n      this.setState({\n        selectedMeasure: this.props.measure,\n        selectedRange: this.props.range,\n        disabledMeasures: this.props.disabledMeasures,\n        evaluationMeasureList: this.props.evaluationMeasureList\n      });\n    }\n  }\n\n  handleMeasure(e, v) {\n    this.setState({\n      selectedMeasure: v\n    });\n    this.props.onHandleMeasureChange(v, this.props.id);\n  }\n\n  handleRange(e) {\n    this.setState({\n      selectedRange: e.target.value\n    }, () => {\n      this.handleRangeError();\n    });\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\n  }\n\n  handleMeasureError() {\n    this.setState({\n      measureError: !this.state.selectedMeasure\n    });\n  }\n\n  handleRangeError() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n    if (this.state.selectedRange === '' || regex.test(this.state.selectedRange)) this.setState({\n      rangeError: false\n    });else this.setState({\n      rangeError: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: false,\n          limitTags: 50,\n          options: this.state.evaluationMeasureList,\n          getOptionDisabled: option => !!this.state.disabledMeasures.find(element => element === option),\n          value: this.state.selectedMeasure,\n          sx: {\n            width: 300\n          },\n          onChange: (event, value) => this.handleMeasure(event, value),\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Evaluation measure\",\n            color: \"secondary\",\n            onChange: this.handleMeasureError,\n            error: this.state.selectedMeasure === \"\" && this.state.selectedRange !== \"\" && !this.state.rangeError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Range\",\n          color: \"secondary\",\n          margin: \"dense\",\n          variant: \"outlined\",\n          value: this.state.selectedRange,\n          onChange: this.handleRange,\n          error: this.state.rangeError,\n          helperText: this.state.rangeError && \"Please enter a valid range.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EvaluationMeasureRange;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/EvaluationMeasureRange.jsx"],"names":["React","Grid","TextField","Autocomplete","EvaluationMeasureRange","Component","constructor","props","handleMeasure","bind","handleRange","handleMeasureError","handleRangeError","state","selectedMeasure","measure","selectedRange","range","measureError","rangeError","disabledMeasures","evaluationMeasureList","evaluationMeasureListTrainTest","evaluationMeasureListFolds","componentDidMount","console","log","setState","componentDidUpdate","prevProps","e","v","onHandleMeasureChange","id","target","value","onHandleRangeChange","regex","RegExp","test","render","option","find","element","width","event","params"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Autocomplete } from '@mui/material';\r\n\r\nclass EvaluationMeasureRange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMeasure = this.handleMeasure.bind(this);\r\n    this.handleRange = this.handleRange.bind(this);\r\n    this.handleMeasureError= this.handleMeasureError.bind(this);\r\n    this.handleRangeError= this.handleRangeError.bind(this);\r\n\r\n    this.state = {\r\n      selectedMeasure: props.measure,\r\n      selectedRange: props.range,\r\n      measureError: false,\r\n\t\t\trangeError: false,\r\n      disabledMeasures: props.disabledMeasures,\r\n\r\n      evaluationMeasureList: [],\r\n\t\t\tevaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\r\n\t\t\tevaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\r\n\t\t\t\r\n    };\r\n  }\r\n    \r\n  componentDidMount()\r\n  {console.log(\"ja?\")\r\n  this.setState({\r\n    selectedMeasure: this.props.measure,\r\n    selectedRange: this.props.range,\r\n    disabledMeasures: this.props.disabledMeasures,\r\n    evaluationMeasureList: this.props.evaluationMeasureList\r\n  })}\r\n\r\n  componentDidUpdate(prevProps){\r\n    console.log(this.props.evaluationMeasureList)\r\n    console.log(\"??????\")\r\n    if(prevProps !== this.props){\r\n      console.log(\"updated\")\r\n      this.setState({\r\n        selectedMeasure: this.props.measure,\r\n        selectedRange: this.props.range,\r\n        disabledMeasures: this.props.disabledMeasures,\r\n        evaluationMeasureList: this.props.evaluationMeasureList\r\n      })\r\n    }\r\n  }\r\n \r\n\r\n\thandleMeasure(e, v) {\r\n    this.setState({selectedMeasure: v})\r\n    this.props.onHandleMeasureChange(v, this.props.id);\r\n\t}\r\n\r\n  handleRange(e) {\r\n    this.setState({\r\n      selectedRange: e.target.value\r\n    }, ()=>{this.handleRangeError()})\r\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\r\n\t}\r\n\t\r\n  handleMeasureError() {\r\n      this.setState({ measureError: !this.state.selectedMeasure })\r\n  }\r\n\r\n  handleRangeError() {\r\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n    if ( this.state.selectedRange === '' || regex.test(this.state.selectedRange))\r\n      this.setState({ rangeError: false })\r\n    else\r\n      this.setState({ rangeError: true })\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <Grid container spacing = {2}>\r\n        <Grid item>\r\n          <Autocomplete\r\n            multiple = {false}\r\n            limitTags={50}\r\n            options={this.state.evaluationMeasureList}\r\n            getOptionDisabled={(option) => !!this.state.disabledMeasures.find(element => element === option)}\r\n            value={this.state.selectedMeasure}\r\n            sx={{width: 300}}\r\n            onChange={(event, value) => this.handleMeasure(event, value)}\r\n            renderInput={(params) => \r\n              <TextField {...params}\r\n                variant='outlined'\r\n                label = \"Evaluation measure\"\r\n                color='secondary'\r\n                onChange={this.handleMeasureError}\r\n                error={this.state.selectedMeasure===\"\" && this.state.selectedRange!==\"\" && !this.state.rangeError}\r\n              />\r\n            }\r\n\t\t\t\t\t/>\r\n        </Grid> \r\n        <Grid item>\r\n          <TextField\r\n            label='Range'\r\n            color='secondary'\r\n            margin='dense'\r\n            variant='outlined'\r\n            value={this.state.selectedRange}\r\n            onChange={this.handleRange}\r\n            error={this.state.rangeError}\r\n            helperText={this.state.rangeError &&  \"Please enter a valid range.\"}\r\n          />\r\n\t\t\t\t</Grid>\r\n      </Grid>\r\n    );\r\n   }\r\n }\r\n\r\n export default EvaluationMeasureRange;\r\n "]},"metadata":{},"sourceType":"module"}