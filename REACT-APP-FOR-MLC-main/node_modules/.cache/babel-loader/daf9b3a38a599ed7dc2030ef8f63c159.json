{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\EvaluationMeasureRange.jsx\";\nimport React from 'react';\nimport { Grid } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport { Autocomplete } from '@mui/material'; //import { Measures } from './dataOptions';\n\nimport { getList } from './BenchmarkDataFilter.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass EvaluationMeasureRange extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getEvaluationMeasureList = () => {\n      var query = `\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n    select distinct ?measure_label {\n    ?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\n    ?measure rdfs:label ?measure_label .\n     FILTER NOT EXISTS{\n    ?m rdfs:subClassOf ?measure \n    FILTER(?m!= ?measure && ?m!= owl:Nothing )\n    }\n    }\n\t\t`;\n      this.setState({\n        evaluationMeasureList: getList(query, \"\")\n      });\n    };\n\n    this.handleMeasure = this.handleMeasure.bind(this);\n    this.handleRange = this.handleRange.bind(this);\n    this.handleMeasureError = this.handleMeasureError.bind(this);\n    this.handleRangeError = this.handleRangeError.bind(this);\n    this.state = {\n      SelectedMeasure: props.measure,\n      SelectedRange: props.range,\n      MeasureError: false,\n      RangeError: false,\n      disabledMeasures: props.disabledMeasures,\n      evaluationMeasureList: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      console.log(\"updated\");\n      this.setState({\n        SelectedMeasure: this.props.measure,\n        SelectedRange: this.props.range,\n        disabledMeasures: this.props.disabledMeasures\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getEvaluationMeasureList();\n  }\n\n  handleMeasure(e, v) {\n    this.setState({\n      SelectedMeasure: v\n    }, () => console.log(v + 'eval' + this.state.SelectedMeasure + this.state.disabledMeasures));\n    this.props.onHandleMeasureChange(v, this.props.id);\n  }\n\n  handleRange(e) {\n    this.setState({\n      SelectedRange: e.target.value\n    }, () => {\n      this.handleRangeError();\n    });\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\n  }\n\n  handleMeasureError() {\n    if (this.state.SelectedMeasure) this.setState({\n      MeasureError: false\n    });else this.setState({\n      MeasureError: true\n    });\n  }\n\n  handleRangeError() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n    if (this.state.SelectedRange === '' || regex.test(this.state.SelectedRange)) this.setState({\n      RangeError: false\n    });else this.setState({\n      RangeError: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: false,\n          limitTags: 50,\n          options: this.state.evaluationMeasureList,\n          getOptionDisabled: option => !!this.state.disabledMeasures.find(element => element === option),\n          value: this.state.SelectedMeasure,\n          sx: {\n            width: 300\n          },\n          onChange: this.handleMeasure,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Evaluation measure\",\n            color: \"secondary\",\n            onChange: this.handleMeasureError,\n            error: this.state.SelectedMeasure === \"\" && this.state.SelectedRange !== \"\" && !this.state.RangeError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Range\",\n          color: \"secondary\",\n          margin: \"dense\",\n          variant: \"outlined\",\n          value: this.state.SelectedRange,\n          onChange: this.handleRange,\n          error: this.state.RangeError,\n          helperText: this.state.RangeError && \"Please enter a valid range.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default EvaluationMeasureRange;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/EvaluationMeasureRange.jsx"],"names":["React","Grid","TextField","Autocomplete","getList","EvaluationMeasureRange","Component","constructor","props","getEvaluationMeasureList","query","setState","evaluationMeasureList","handleMeasure","bind","handleRange","handleMeasureError","handleRangeError","state","SelectedMeasure","measure","SelectedRange","range","MeasureError","RangeError","disabledMeasures","componentDidUpdate","prevProps","console","log","componentDidMount","e","v","onHandleMeasureChange","id","target","value","onHandleRangeChange","regex","RegExp","test","render","option","find","element","width","params"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Autocomplete } from '@mui/material';\r\n//import { Measures } from './dataOptions';\r\nimport { getList } from './BenchmarkDataFilter.jsx';\r\n\r\nclass EvaluationMeasureRange extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleMeasure = this.handleMeasure.bind(this);\r\n    this.handleRange = this.handleRange.bind(this);\r\n    this.handleMeasureError= this.handleMeasureError.bind(this);\r\n    this.handleRangeError= this.handleRangeError.bind(this);\r\n\r\n    this.state = {\r\n      SelectedMeasure: props.measure,\r\n      SelectedRange: props.range,\r\n      MeasureError: false,\r\n\t\t\tRangeError: false,\r\n      disabledMeasures: props.disabledMeasures,\r\n      evaluationMeasureList: []\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps){\r\n    if(prevProps!== this.props){\r\n    console.log(\"updated\")\r\n    this.setState({\r\n      SelectedMeasure: this.props.measure,\r\n      SelectedRange: this.props.range,\r\n      disabledMeasures: this.props.disabledMeasures,\r\n    })\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n\t\tthis.getEvaluationMeasureList()\r\n\t}\r\n\r\n  getEvaluationMeasureList=() => {\r\n\t\tvar query = `\r\n    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\r\n    select distinct ?measure_label {\r\n    ?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\r\n    ?measure rdfs:label ?measure_label .\r\n     FILTER NOT EXISTS{\r\n    ?m rdfs:subClassOf ?measure \r\n    FILTER(?m!= ?measure && ?m!= owl:Nothing )\r\n    }\r\n    }\r\n\t\t`\r\n    \r\n\t\tthis.setState({\r\n\t\t\tevaluationMeasureList: getList(query, \"\")\r\n\t\t})\r\n\t}\r\n\r\n\thandleMeasure(e, v) {\r\n    this.setState({\r\n      SelectedMeasure: v,\r\n    }, ()=>console.log(v+'eval'+this.state.SelectedMeasure+this.state.disabledMeasures))\r\n    this.props.onHandleMeasureChange(v, this.props.id);\r\n\t}\r\n\r\n  handleRange(e) {\r\n    this.setState({\r\n      SelectedRange: e.target.value\r\n    }, ()=>{this.handleRangeError()})\r\n    this.props.onHandleRangeChange(e.target.value, this.props.id);\r\n\t}\r\n\t\r\n  handleMeasureError() {\r\n      if (this.state.SelectedMeasure)\r\n        this.setState({ MeasureError: false })\r\n      else\r\n        this.setState({ MeasureError: true })\r\n  }\r\n\r\n  handleRangeError() {\r\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n    if ( this.state.SelectedRange === '' || regex.test(this.state.SelectedRange))\r\n      this.setState({ RangeError: false })\r\n    else\r\n      this.setState({ RangeError: true })\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <Grid container spacing = {2}>\r\n        <Grid item>\r\n          <Autocomplete\r\n            multiple = {false}\r\n            limitTags={50}\r\n            options={this.state.evaluationMeasureList}\r\n            getOptionDisabled={(option) => !!this.state.disabledMeasures.find(element => element === option)}\r\n            value={this.state.SelectedMeasure}\r\n            sx={{width: 300}}\r\n            onChange={this.handleMeasure}\r\n            renderInput={(params) => \r\n              <TextField {...params}\r\n                variant='outlined'\r\n                label = \"Evaluation measure\"\r\n                color='secondary'\r\n                onChange={this.handleMeasureError}\r\n                error={this.state.SelectedMeasure===\"\" && this.state.SelectedRange!==\"\" && !this.state.RangeError}\r\n              />\r\n            }\r\n\t\t\t\t\t/>\r\n        </Grid> \r\n        <Grid item>\r\n          <TextField\r\n            label='Range'\r\n            color='secondary'\r\n            margin='dense'\r\n            variant='outlined'\r\n            value={this.state.SelectedRange}\r\n            onChange={this.handleRange}\r\n            error={this.state.RangeError}\r\n            helperText={this.state.RangeError &&  \"Please enter a valid range.\"}\r\n          />\r\n\t\t\t\t</Grid>\r\n      </Grid>\r\n    );\r\n   }\r\n }\r\n  \r\n export default EvaluationMeasureRange;\r\n "]},"metadata":{},"sourceType":"module"}