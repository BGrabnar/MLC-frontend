{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http'); // gets the query and retuns the list of data from the query\n\n\nexport function getList(query, type) {\n  var list = []; // post request\n\n  var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n  http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      for (let i = 0; i < data.split('<literal>').length; i++) {\n        if (type === \"datasets\") {\n          list[i] = data.split('<literal>')[i].split('.arff')[0];\n        } else {\n          list[i] = data.split('<literal>')[i].split('</literal>')[0];\n        }\n      }\n\n      list.shift();\n      list.sort((a, b) => a.localeCompare(b, undefined, {\n        sensitivity: 'base'\n      }));\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}\n\nasync function getRows(query) {\n  var list = []; // post request\n\n  var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n  http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      for (let i = 1; i < data.split('<result>').length; i++) {\n        var subList = {\n          id: data.split('<result>')[i].split('<uri>')[1].split('</uri>')[0],\n          firstName: data.split('<result>')[i].split('<uri>')[2].split('</uri>')[0],\n          lastName: data.split('<result>')[i].split('<uri>')[3].split('</uri>')[0]\n        };\n        list.push(subList);\n      }\n\n      okPLS = list;\n      console.log(okPLS);\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\t\t\tselect ?dataset_label\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t\t?dataset rdfs:label ?dataset_label .\n\t\t\tFILTER regex(?dataset_label, \"^[^_]+$\") .\n\t\t\t}\n\t\t`;\n      this.setState({\n        datasetList: getList(query, \"datasets\")\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      this.setState({\n        algorithmList: getList(query, \"algorithms\")\n      });\n    };\n\n    this.getDataFromQuery = () => {\n      var query = `\n\t\tselect *\n\t\twhere {\n\t\t?s ?p ?o\n\t\t}\n\t\tlimit 100\n\t\t`;\n      const columns = [{\n        field: 'id',\n        headerName: 'S',\n        width: 200\n      }, {\n        field: 'firstName',\n        headerName: 'P',\n        width: 200\n      }, {\n        field: 'lastName',\n        headerName: 'O',\n        width: 200\n      }];\n      const rows = getRows(query);\n      this.setState({\n        spreadSheetRows: rows\n      }, () => {\n        if (rows === undefined) {\n          this.setState({\n            invoiceResultFlag: true\n          });\n        } else {\n          this.setState({\n            invoicedisplayFlag: true\n          });\n        }\n      });\n      /* this.setState({\r\n      \t\r\n      }) */\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvals: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      datasetList: [],\n      algorithmList: [],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadsheetData: [],\n      spreadSheetColumns: [],\n      spreadSheetRows: []\n    };\n  }\n\n  componentDidMount() {\n    this.setEvaluationHTMLElements();\n    this.getDatasets();\n    this.getAlgorithms();\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvals);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvals[i].id,\n            range: this.state.selectedEvals[i].range,\n            measure: this.state.selectedEvals[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvals[i].id),\n            disabled: this.state.selectedEvals.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvals[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].measure === null || this.state.selectedEvals[i].measure === '' || this.state.selectedEvals.length > 10 || this.state.selectedEvals[i].range === '' || !regex.test(this.state.selectedEvals[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvals;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvals[this.state.selectedEvals.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].id !== x) newSelectedEvals.push(this.state.selectedEvals[i]);\n    }\n\n    this.setState({\n      selectedEvals: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\"\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\"\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Validation\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: this.getDataFromQuery,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.spreadSheetRows,\n          columns: this.state.spreadSheetColumns,\n          pageSize: 10,\n          rowsPerPageOptions: [10]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nvar okPLS = [];\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","DataGrid","http","require","getList","query","type","list","req","encodeURIComponent","get","resp","data","on","chunk","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","err","console","log","getRows","subList","id","firstName","lastName","push","okPLS","Body","Component","constructor","props","getDatasets","setState","datasetList","getAlgorithms","algorithmList","getDataFromQuery","columns","field","headerName","width","rows","spreadSheetRows","invoiceResultFlag","invoicedisplayFlag","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","state","evaluationHTMLElements","selectedEvals","addButtonDisabled","disabledMeasures","foldsAutocompleteDisplayMode","spreadsheetData","spreadSheetColumns","componentDidMount","setEvaluationHTMLElements","val","newSelectedEvals","forEach","el","measure","setDisabledMeasures","range","evals","newDisabledMeasures","regex","RegExp","test","x","render","params","event","value","display","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\n\r\nconst http = require('http')\r\n\r\n// gets the query and retuns the list of data from the query\r\nexport function getList(query, type)\r\n{\r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tif (type === \"datasets\")\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('.arff')[0];\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\r\n\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\treturn list;\r\n}\r\n\r\nasync function getRows(query)\r\n{\r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\tid: data.split('<result>')[i].split('<uri>')[1].split('</uri>')[0],\r\n\t\t\t\t\t\tfirstName: data.split('<result>')[i].split('<uri>')[2].split('</uri>')[0],\r\n\t\t\t\t\t\tlastName: data.split('<result>')[i].split('<uri>')[3].split('</uri>')[0]\r\n\t\t\t\t\t};\r\n\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tokPLS = list;\r\n\t\t\t\tconsole.log(okPLS);\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\treturn list;\r\n}\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n      \t\tselectedEvals: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadsheetData: [],\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: []\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\r\n\t\t\tselect ?dataset_label\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t\t?dataset rdfs:label ?dataset_label .\r\n\t\t\tFILTER regex(?dataset_label, \"^[^_]+$\") .\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\tdatasetList: getList(query, \"datasets\")\r\n\t\t})\r\n\t}\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\talgorithmList: getList(query, \"algorithms\")\r\n\t\t})\r\n\t}\r\n\r\n\tgetDataFromQuery=()=>{\r\n\t\tvar query = `\r\n\t\tselect *\r\n\t\twhere {\r\n\t\t?s ?p ?o\r\n\t\t}\r\n\t\tlimit 100\r\n\t\t`\r\n\r\n\t\tconst columns = [\r\n\t\t\t{ field: 'id', headerName: 'S', width: 200 },\r\n\t\t\t{ field: 'firstName', headerName: 'P', width: 200 },\r\n\t\t\t{ field: 'lastName', headerName: 'O', width: 200 },\r\n\t\t  ];\r\n\r\n\r\n\t\tconst rows = (getRows(query));\r\n\t\tthis.setState({spreadSheetRows: rows}, ()=>{\r\n\t\t\tif(rows===undefined){\r\n\t\t\t\tthis.setState({invoiceResultFlag: true})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.setState({invoicedisplayFlag: true});\r\n\t\t\t}\r\n\t\t});\r\n\t\t/* this.setState({\r\n\t\t\t\r\n\t\t}) */\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvals)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvals[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvals[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvals[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvals[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvals.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvals[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvals[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvals.length>10 ||\r\n\t\t\t\tthis.state.selectedEvals[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvals[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvals\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvals[this.state.selectedEvals.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvals[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"\"});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"none\"});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={this.getDataFromQuery}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t<div style={{ height: 400, width: '100%' }}>\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\nvar okPLS = [];\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}