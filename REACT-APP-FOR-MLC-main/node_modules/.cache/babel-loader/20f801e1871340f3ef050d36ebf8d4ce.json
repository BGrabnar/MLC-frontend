{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { CompressOutlined } from '@mui/icons-material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http'); // gets the query and retuns the list of data from the query\n\n\nexport function getList(query, type) {\n  var list = []; // post request\n\n  var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n  http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      if (type === \"query\") {\n        for (let i = 0; i < data.split('<result>').length; i++) {\n          list[i] = data.split('<result>')[i].split(\"</result>\")[0];\n          var subList = [];\n\n          for (let j = 0; j < list[i].split(\"<uri>\").length; j++) {\n            subList[j] = list[i].split('<uri>')[j].split(\"</uri>\")[0];\n          }\n\n          subList.shift();\n          list[i] = subList;\n        }\n\n        list.shift();\n      } else {\n        for (let i = 0; i < data.split('<literal>').length; i++) {\n          if (type === \"datasets\") {\n            list[i] = data.split('<literal>')[i].split('.arff')[0];\n          } else {\n            list[i] = data.split('<literal>')[i].split('</literal>')[0];\n          }\n        }\n\n        list.shift();\n        list.sort((a, b) => a.localeCompare(b, undefined, {\n          sensitivity: 'base'\n        }));\n      }\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\n\t\t\tselect ?dataset_label\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t\t?dataset rdfs:label ?dataset_label .\n\t\t\tFILTER regex(?dataset_label, \"^[^_]+$\") .\n\t\t\t}\n\t\t`;\n      this.setState({\n        datasetList: getList(query, \"datasets\")\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      this.setState({\n        algorithmList: getList(query, \"algorithms\")\n      });\n    };\n\n    this.getDataFromQuery = () => {\n      var query = `\n\t\tselect *\n\t\twhere {\n\t\t?s ?p ?o\n\t\t}\n\t\tlimit 10\n\t\t`;\n      var data = getList(query, \"query\");\n      console.log(getList(query, \"query\"));\n      console.log(data.length);\n      /* for (let i = 0; i < this.state.spreadsheetData.length; i++)\r\n      {\r\n      \tthis.setState({spreadSheetRows.push()})\r\n      \tthis.state.spreadSheetRows.push(createData(this.state.spreadsheetData[i][0], this.state.spreadsheetData[i][1], this.state.spreadsheetData[i][2]));\r\n      \t\r\n      } */\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvals: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      datasetList: [],\n      algorithmList: [],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadsheetData: [],\n      spreadSheetRows: []\n    };\n  }\n\n  componentDidMount() {\n    this.setEvaluationHTMLElements();\n    this.getDatasets();\n    this.getAlgorithms();\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvals);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvals[i].id,\n            range: this.state.selectedEvals[i].range,\n            measure: this.state.selectedEvals[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvals[i].id),\n            disabled: this.state.selectedEvals.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvals[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].measure === null || this.state.selectedEvals[i].measure === '' || this.state.selectedEvals.length > 10 || this.state.selectedEvals[i].range === '' || !regex.test(this.state.selectedEvals[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvals;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvals[this.state.selectedEvals.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].id !== x) newSelectedEvals.push(this.state.selectedEvals[i]);\n    }\n\n    this.setState({\n      selectedEvals: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\"\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\"\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Split\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: this.getDataFromQuery,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          sx: {\n            minWidth: 650\n          },\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                children: \"Dessert (100g serving)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Calories\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Fat\\xA0(g)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 6\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.state.spreadSheetRows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n              sx: {\n                '&:last-child td, &:last-child th': {\n                  border: 0\n                }\n              },\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: row.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.calories\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: row.fat\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 7\n              }, this)]\n            }, row.name, true, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 7\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 6\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 4\n    }, this);\n  }\n\n} // for the spreadsheet\n\n\nfunction createData(name, calories, fat) {\n  return {\n    name,\n    calories,\n    fat\n  };\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","CompressOutlined","http","require","getList","query","type","list","req","encodeURIComponent","get","resp","data","on","chunk","i","split","length","subList","j","shift","sort","a","b","localeCompare","undefined","sensitivity","err","console","log","Body","Component","constructor","props","getDatasets","setState","datasetList","getAlgorithms","algorithmList","getDataFromQuery","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","state","evaluationHTMLElements","selectedEvals","addButtonDisabled","disabledMeasures","foldsAutocompleteDisplayMode","spreadsheetData","spreadSheetRows","componentDidMount","setEvaluationHTMLElements","val","id","newSelectedEvals","forEach","el","measure","push","setDisabledMeasures","range","evals","newDisabledMeasures","regex","RegExp","test","x","render","width","params","event","value","display","minWidth","map","row","border","name","calories","fat","createData"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\n\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { CompressOutlined } from '@mui/icons-material';\r\n\r\nconst http = require('http')\r\n\r\n// gets the query and retuns the list of data from the query\r\nexport function getList(query, type)\r\n{\r\n\tvar list = []\r\n\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tif (type === \"query\")\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 0; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlist[i] = data.split('<result>')[i].split(\"</result>\")[0];\r\n\t\t\t\t\tvar subList = [];\r\n\t\t\t\t\tfor (let j = 0; j < list[i].split(\"<uri>\").length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList[j] = list[i].split('<uri>')[j].split(\"</uri>\")[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsubList.shift();\r\n\t\t\t\t\tlist[i] = subList;\r\n\t\t\t\t}\r\n\t\t\t\tlist.shift();\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (type === \"datasets\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('.arff')[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlist.shift();\r\n\t\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'}));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\r\n\treturn list;\r\n}\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n      \t\tselectedEvals: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadsheetData: [],\r\n\t\t\tspreadSheetRows: []\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\r\n\t\t\tselect ?dataset_label\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t\t?dataset rdfs:label ?dataset_label .\r\n\t\t\tFILTER regex(?dataset_label, \"^[^_]+$\") .\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\tdatasetList: getList(query, \"datasets\")\r\n\t\t})\r\n\t}\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\talgorithmList: getList(query, \"algorithms\")\r\n\t\t})\r\n\t}\r\n\r\n\tgetDataFromQuery=()=>{\r\n\t\tvar query = `\r\n\t\tselect *\r\n\t\twhere {\r\n\t\t?s ?p ?o\r\n\t\t}\r\n\t\tlimit 10\r\n\t\t`\r\n\r\n\t\tvar data = getList(query, \"query\");\r\n\r\n\t\tconsole.log(getList(query, \"query\"));\r\n\t\tconsole.log(data.length);\r\n\t\t/* for (let i = 0; i < this.state.spreadsheetData.length; i++)\r\n\t\t{\r\n\t\t\tthis.setState({spreadSheetRows.push()})\r\n\t\t\tthis.state.spreadSheetRows.push(createData(this.state.spreadsheetData[i][0], this.state.spreadsheetData[i][1], this.state.spreadsheetData[i][2]));\r\n\t\t\t\r\n\t\t} */\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvals)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvals[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvals[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvals[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvals[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvals.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvals[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvals[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvals.length>10 ||\r\n\t\t\t\tthis.state.selectedEvals[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvals[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvals\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvals[this.state.selectedEvals.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvals[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\t\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"\"});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"none\"});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Split\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={this.getDataFromQuery}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t<TableContainer component={Paper}>\r\n\t\t\t\t<Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n\t\t\t\t\t<TableHead>\r\n\t\t\t\t\t<TableRow>\r\n\t\t\t\t\t\t<TableCell>Dessert (100g serving)</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">Calories</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t</TableHead>\r\n\t\t\t\t\t<TableBody>\r\n\t\t\t\t\t{this.state.spreadSheetRows.map((row) => (\r\n\t\t\t\t\t\t<TableRow\r\n\t\t\t\t\t\tkey={row.name}\r\n\t\t\t\t\t\tsx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t<TableCell component=\"th\" scope=\"row\">\r\n\t\t\t\t\t\t\t{row.name}\r\n\t\t\t\t\t\t</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">{row.calories}</TableCell>\r\n\t\t\t\t\t\t<TableCell align=\"right\">{row.fat}</TableCell>\r\n\t\t\t\t\t\t</TableRow>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t</TableBody>\r\n\t\t\t\t</Table>\r\n\t\t\t\t</TableContainer>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\n// for the spreadsheet\r\nfunction createData(name, calories, fat) {\r\n\treturn { name, calories, fat};\r\n}\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}