{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ajax\\\\Desktop\\\\Praksa\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\PerformanceDataTable.jsx\";\nimport React from 'react';\nimport { CustomCircularProgress, CustomDataGrid } from './themes.js';\nimport { GlobalStyles, Box } from '@mui/material';\nimport { GridToolbarExport, GridToolbarContainer } from '@material-ui/data-grid';\nimport Plot from 'react-plotly.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nfunction MyExportButton() {\n  return /*#__PURE__*/_jsxDEV(GridToolbarContainer, {\n    children: /*#__PURE__*/_jsxDEV(GridToolbarExport, {\n      color: \"secondary\",\n      variant: \"contained\",\n      style: {\n        marginBottom: 5\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 4\n  }, this);\n}\n\n_c = MyExportButton;\n\nclass PerformanceDataTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getColumnsAndRows = query => {\n      var selectedMeasures = {};\n\n      for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n        selectedMeasures[this.state.selectedEvaluationMeasures[i]['measure']] = this.state.selectedEvaluationMeasures[i]['range'];\n      }\n\n      console.log(selectedMeasures); // columns\n\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (this.state.validationFolds) // add extra columns if its folds validation\n        {\n          var subColumn = {\n            field: 'parameters',\n            headerName: 'Tuned Parameters',\n            width: 400\n          };\n          columns.push(subColumn);\n          subColumn = {\n            field: 'fold',\n            headerName: 'Fold',\n            width: 150\n          };\n          columns.push(subColumn);\n        }\n\n      for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n        subColumn = {\n          field: this.state.evaluationMeasureList[i],\n          width: 250\n        };\n        columns.push(subColumn);\n      } // rows\n\n\n      var list = [];\n      var models = {}; // post request\n      //var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query) // change back\n\n      var req = \"http://localhost:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList = {\n              id: i,\n              dataset: result[1].split('</literal>')[0],\n              algorithm: result[2].split('</literal>')[0]\n            };\n            models[i] = result[4].split('</literal>')[0];\n\n            for (let j = 0; j < this.state.evaluationMeasureList.length; j++) {\n              // handle range\n              if (Object.keys(selectedMeasures).includes(this.state.evaluationMeasureList[j])) {\n                if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^>=[0-9.]+$/)) {\n                  if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(2))) {\n                    subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                  }\n                } else if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^>[0-9.]+$/)) {\n                  if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) > parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(1))) {\n                    subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                  }\n                } else if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^<=[0-9.]+$/)) {\n                  if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(2))) {\n                    subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                  }\n                } else if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^<[0-9.]+$/)) {\n                  if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) < parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(1))) {\n                    subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                  }\n                } else if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^[0-9.]+$/)) {\n                  if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) === parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]])) {\n                    subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                  }\n                } else if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^[0-9.]+-[0-9.]+$/)) {\n                  if (parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1])) {\n                    if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0]) && parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1])) {\n                      subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                    }\n                  } else {\n                    if (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1]) && parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0])) {\n                      subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                    }\n                  }\n                } else {\n                  subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n                }\n              } else {\n                subList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n              }\n            }\n\n            if (this.state.validationFolds) {\n              // tidy the parameter string\n              var evaluationParameters = result[4].split('</literal>')[0];\n              evaluationParameters = evaluationParameters.replace(result[1].split('</literal>')[0], \"\").replace(result[2].split('</literal>')[0], \"\").replace(\"_predictive_model_train_test_evaluation_workflow_execution\", \"\").substr(1);\n              evaluationParameters = evaluationParameters.substr(1, evaluationParameters.length - 3);\n              var wordArray = evaluationParameters.split(\"_\");\n              var str = wordArray[0];\n\n              for (let i = 1; i < wordArray.length; i++) {\n                if (wordArray[i][0] >= '0' && wordArray[i][0] <= '9') {\n                  str += \": \" + wordArray[i];\n                } else {\n                  if (wordArray[i - 1][0] >= '0' && wordArray[i - 1][0] <= '9') {\n                    str += \", \" + wordArray[i];\n                  } else {\n                    str += \" \" + wordArray[i];\n                  }\n                }\n              }\n\n              subList['parameters'] = str; // fold\n\n              var fold = result[5].split('</literal>')[0];\n              subList['fold'] = fold.substr(fold.length - 11, 1);\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns,\n            loadingData: \"none\"\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.filterData = this.filterData.bind(this);\n    this.state = {\n      spreadSheetRows: [],\n      spreadSheetColumns: [],\n      plotX: [],\n      plotY: [],\n      selectedDatasets: props.selectedDatasets,\n      selectedAlgorithms: props.selectedAlgorithms,\n      selectedFold: props.selectedFold,\n      selectedEvaluationMeasures: props.selectedEvaluationMeasures,\n      evaluationMeasureList: props.evaluationMeasureList,\n      validationFolds: props.validationFolds,\n      loadingData: \"flex\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.setFilter(this.filterData);\n    this.getDataFromQuery();\n  }\n\n  filterData() {\n    this.setState({\n      selectedDatasets: this.props.selectedDatasets,\n      selectedAlgorithms: this.props.selectedAlgorithms,\n      selectedFold: this.props.selectedFold,\n      validationFolds: this.props.validationFolds,\n      selectedEvaluationMeasures: this.props.selectedEvaluationMeasures,\n      evaluationMeasureList: this.props.evaluationMeasureList,\n      loadingData: \"flex\"\n    }, () => {\n      this.getDataFromQuery();\n    });\n  }\n\n  getDataFromQuery() {\n    var filterString = \"\";\n\n    for (let i = 0; i < this.state.selectedDatasets.length; i++) // for datasets\n    {\n      if (i === 0) filterString += 'Filter (?datasetLabel in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedDatasets[i];\n      if (i === this.state.selectedDatasets.length - 1) filterString += '\")).';\n    }\n\n    for (let i = 0; i < this.state.selectedAlgorithms.length; i++) // for algorithms\n    {\n      if (i === 0) filterString += 'Filter (?Algorithm in (\"';else filterString += '\", \"';\n      filterString += this.state.selectedAlgorithms[i];\n      if (i === this.state.selectedAlgorithms.length - 1) filterString += '\")).';\n    }\n\n    for (let i = 0; i < this.state.selectedFold.length; i++) // for folds\n    {\n      if (i === 0) filterString += 'Filter (regex(?Fold, \"[';\n      filterString += this.state.selectedFold[i];\n      if (i === this.state.selectedFold.length - 1) filterString += ']\")).';\n    }\n\n    if (!this.state.validationFolds) {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\t\n\t\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures) ?model\n\t\t\tWHERE {\n\t\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n\t\t\t?evaluationMeasure rdf:type ?evaluationMeasureClass .\n\t\t\t?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution ?hasPart ?predictiveModelingAlgorithmExecution.\n\t\t\t?predictiveModelingAlgorithmExecution <http://purl.obolibrary.org/obo/OBI_0000299> ?predictiveModel.\n\t\t\t?predictiveModel <http://www.ontodm.com/OntoDM-core/ontoexp_0072> ?model.\n\t\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t\t${filterString}\n\t\t\t}\n\t\t\tGROUP BY ?datasetLabel ?Algorithm ?model\n\t\t\t`;\n    } else {\n      query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\t\n\t\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures) ?TunedParameters ?Fold\n\t\t\tWHERE {\n\t\t\t\t?foldTestFoldTrainDatasetAssignment <http://www.obofoundry.org/ro/ro.owl#precedes> ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t\t\t?foldTestFoldTrainDatasetAssignment rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0068>.\n\t\t\t\t?foldTestFoldTrainDatasetAssignment ?hasSpecifiedOutput ?foldTest.\n\t\t\t\t?foldTest rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144>.\n\t\t\t\t?foldTest rdfs:label ?Fold.\n\n\n\t\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n?evaluationMeasure rdf:type ?evaluationMeasureClass .\n?predictiveModelTrainTestEvaluationWorkflowExecution rdfs:label ?TunedParameters.\n\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n\t\t\t?evaluationMeasure rdf:type ?evaluationMeasureClass .\n\t\t\t?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t\tFILTER (regex(?Fold, \"test\")).\n\t\t\t${filterString}\n\t\t\t}\n\t\t\tGROUP BY ?datasetLabel ?Algorithm ?TunedParameters ?Fold\n\t\t\t`;\n    }\n\n    console.log(query);\n    this.getColumnsAndRows(query);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: this.state.loadingData,\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            mt: 1,\n            mb: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(CustomCircularProgress, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 650,\n          width: '99%',\n          marginBottom: 15\n        },\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            ml: 1.5,\n            mt: 1.5,\n            height: 650\n          },\n          children: /*#__PURE__*/_jsxDEV(CustomDataGrid, {\n            rows: this.state.spreadSheetRows,\n            columns: this.state.spreadSheetColumns,\n            pageSize: 10,\n            rowsPerPageOptions: [10],\n            disableColumnMenu: true,\n            onRowClick: data => console.log(data['AUPRC']) // log row data\n            ,\n            components: {\n              Toolbar: MyExportButton\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default PerformanceDataTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyExportButton\");","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/src/components/PerformanceDataTable.jsx"],"names":["React","CustomCircularProgress","CustomDataGrid","GlobalStyles","Box","GridToolbarExport","GridToolbarContainer","Plot","http","require","MyExportButton","marginBottom","PerformanceDataTable","Component","constructor","props","getColumnsAndRows","query","selectedMeasures","i","state","selectedEvaluationMeasures","length","console","log","columns","field","headerName","width","validationFolds","subColumn","push","evaluationMeasureList","list","models","req","encodeURIComponent","get","resp","data","on","chunk","split","result","subList","id","dataset","algorithm","j","Object","keys","includes","match","parseFloat","substr","evaluationParameters","replace","wordArray","str","fold","setState","spreadSheetRows","spreadSheetColumns","loadingData","err","filterData","bind","plotX","plotY","selectedDatasets","selectedAlgorithms","selectedFold","componentDidMount","setFilter","getDataFromQuery","filterString","render","display","justifyContent","mt","mb","height","ml","Toolbar"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {CustomCircularProgress, CustomDataGrid} from './themes.js';\r\nimport { GlobalStyles, Box } from '@mui/material';\r\nimport { GridToolbarExport, GridToolbarContainer} from '@material-ui/data-grid';\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst http = require('http')\r\n\r\nfunction MyExportButton() {\r\n\treturn (\r\n\t  <GridToolbarContainer>\t\t\t\t\t\t\r\n\t\t\t<GridToolbarExport color='secondary' variant='contained' style={{marginBottom:5}}/>\r\n\t  </GridToolbarContainer>\r\n\t);\r\n  }\r\n\r\nclass PerformanceDataTable extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.filterData = this.filterData.bind(this);\r\n\r\n        this.state = {\r\n            spreadSheetRows: [],\r\n            spreadSheetColumns: [],\r\n\t\t\tplotX: [],\r\n\t\t\tplotY: [],\r\n\r\n            selectedDatasets: props.selectedDatasets,\r\n            selectedAlgorithms: props.selectedAlgorithms,\r\n\t\t\tselectedFold: props.selectedFold,\r\n            selectedEvaluationMeasures: props.selectedEvaluationMeasures,\r\n            evaluationMeasureList: props.evaluationMeasureList,\r\n            validationFolds: props.validationFolds,\r\n\t\t\tloadingData: \"flex\"\r\n        };\r\n    }\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tthis.props.setFilter(this.filterData)\r\n\t\tthis.getDataFromQuery()\r\n\t}\r\n\t\r\n\tfilterData()\r\n\t{\r\n        this.setState({\r\n            selectedDatasets: this.props.selectedDatasets,\r\n            selectedAlgorithms: this.props.selectedAlgorithms,\r\n\t\t\tselectedFold: this.props.selectedFold,\r\n            validationFolds: this.props.validationFolds,\r\n\t\t\tselectedEvaluationMeasures: this.props.selectedEvaluationMeasures,\r\n\t\t\tevaluationMeasureList: this.props.evaluationMeasureList,\r\n\t\t\tloadingData: \"flex\"\r\n    \t},() => {\r\n\t\t\tthis.getDataFromQuery()});\r\n        \r\n\t}\r\n\r\n    getColumnsAndRows = (query) =>\r\n\t{\r\n\t\tvar selectedMeasures = {};\r\n\t\tfor (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++)\r\n\t\t{\r\n\t\t\tselectedMeasures[this.state.selectedEvaluationMeasures[i]['measure']] = this.state.selectedEvaluationMeasures[i]['range'];\r\n\r\n\t\t}\r\n\t\tconsole.log(selectedMeasures);\r\n\r\n\t\t// columns\r\n\t\tvar columns = [\r\n\t\t\t{ field: 'id', headerName: '', width: 20},\r\n\t\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t\t];\r\n\r\n\t\tif (this.state.validationFolds) // add extra columns if its folds validation\r\n\t\t{\r\n\t\t\tvar subColumn = {field: 'parameters', headerName: 'Tuned Parameters', width: 400};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t\tsubColumn = {field: 'fold', headerName: 'Fold', width: 150};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t{\r\n\t\t\tsubColumn = {\r\n\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\r\n\t\t// rows\r\n\t\tvar list = [];\r\n\t\tvar models = {};\r\n\t\t// post request\r\n\t\t//var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query) // change back\r\n\t\tvar req = \"http://localhost:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\t\thttp.get(req, (resp) => {\r\n\t\t\tlet data = '';\r\n\t\t\t\r\n\t\t\t// A chunk of data has been received.\r\n\t\t\tresp.on('data', (chunk) => {\r\n\t\t\t\tdata += chunk;\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t// The whole response has been received. Print out the result.\r\n\t\t\tresp\r\n\t\t\t.on('end', () => {\r\n\t\t\t\t// extract the dataset names from html\r\n\t\t\t\t\r\n\t\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\r\n\t\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\t\tdataset: result[1].split('</literal>')[0],\r\n\t\t\t\t\t\t\talgorithm: result[2].split('</literal>')[0],\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tmodels[i] = result[4].split('</literal>')[0];\r\n\r\n\t\t\t\t\t\tfor (let j = 0; j < this.state.evaluationMeasureList.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// handle range\r\n\t\t\t\t\t\t\tif (Object.keys(selectedMeasures).includes(this.state.evaluationMeasureList[j]))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^>=[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(2)))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^>[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) > parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(1)))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^<=[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(2)))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^<[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) < parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].substr(1)))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) === parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]]))\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse if (selectedMeasures[this.state.evaluationMeasureList[j]].match(/^[0-9.]+-[0-9.]+$/))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1]) )\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0]) && parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1]))\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif (parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) >= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[1]) && parseFloat(result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]) <= parseFloat(selectedMeasures[this.state.evaluationMeasureList[j]].split('-')[0]))\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tsubList[this.state.evaluationMeasureList[j]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.state.validationFolds)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// tidy the parameter string\r\n\t\t\t\t\t\t\tvar evaluationParameters = result[4].split('</literal>')[0]\r\n\t\t\t\t\t\t\tevaluationParameters = evaluationParameters.replace(result[1].split('</literal>')[0], \"\").replace(result[2].split('</literal>')[0], \"\").replace(\"_predictive_model_train_test_evaluation_workflow_execution\", \"\").substr(1);\r\n\t\t\t\t\t\t\tevaluationParameters = evaluationParameters.substr(1, evaluationParameters.length - 3);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar wordArray = evaluationParameters.split(\"_\");\r\n\t\t\t\t\t\t\tvar str = wordArray[0]\r\n\t\t\t\t\t\t\tfor (let i = 1; i < wordArray.length; i++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (wordArray[i][0] >= '0' && wordArray[i][0] <= '9')\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tstr += \": \" + wordArray[i]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif (wordArray[i-1][0] >= '0' && wordArray[i-1][0] <= '9')\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tstr += \", \" + wordArray[i]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tstr += \" \" + wordArray[i]\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tsubList['parameters'] = str;\r\n\r\n\t\t\t\t\t\t\t// fold\r\n\t\t\t\t\t\t\tvar fold = result[5].split('</literal>')[0];\r\n\t\t\t\t\t\t\tsubList['fold'] = fold.substr(fold.length-11, 1);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\t\tspreadSheetColumns: columns,\r\n\t\t\t\t\t\tloadingData: \"none\",\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.on(\"error\", (err) => {\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery(){\r\n\t\tvar filterString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++) // for datasets\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?datasetLabel in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedDatasets[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedDatasets.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedAlgorithms.length; i++) // for algorithms\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?Algorithm in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedAlgorithms[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedAlgorithms.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedFold.length; i++) // for folds\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (regex(?Fold, \"['\r\n\t\t\tfilterString += this.state.selectedFold[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedFold.length - 1)\r\n\t\t\t\tfilterString += ']\")).'\r\n\t\t}\r\n\r\n\t\tif (!this.state.validationFolds)\r\n\t\t{\r\n\t\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\t\r\n\t\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures) ?model\r\n\t\t\tWHERE {\r\n\t\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n\t\t\t?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n\t\t\t?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution ?hasPart ?predictiveModelingAlgorithmExecution.\r\n\t\t\t?predictiveModelingAlgorithmExecution <http://purl.obolibrary.org/obo/OBI_0000299> ?predictiveModel.\r\n\t\t\t?predictiveModel <http://www.ontodm.com/OntoDM-core/ontoexp_0072> ?model.\r\n\t\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t\t${filterString}\r\n\t\t\t}\r\n\t\t\tGROUP BY ?datasetLabel ?Algorithm ?model\r\n\t\t\t`\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tquery = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\t\r\n\t\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures) ?TunedParameters ?Fold\r\n\t\t\tWHERE {\r\n\t\t\t\t?foldTestFoldTrainDatasetAssignment <http://www.obofoundry.org/ro/ro.owl#precedes> ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t\t\t?foldTestFoldTrainDatasetAssignment rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0068>.\r\n\t\t\t\t?foldTestFoldTrainDatasetAssignment ?hasSpecifiedOutput ?foldTest.\r\n\t\t\t\t?foldTest rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144>.\r\n\t\t\t\t?foldTest rdfs:label ?Fold.\r\n\r\n\r\n\t\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\r\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n?predictiveModelTrainTestEvaluationWorkflowExecution rdfs:label ?TunedParameters.\r\n\r\n\t\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n\t\t\t?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n\t\t\t?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t\tFILTER (regex(?Fold, \"test\")).\r\n\t\t\t${filterString}\r\n\t\t\t}\r\n\t\t\tGROUP BY ?datasetLabel ?Algorithm ?TunedParameters ?Fold\r\n\t\t\t`\r\n\t\t}\r\n\t\tconsole.log(query)\r\n\t\tthis.getColumnsAndRows(query)\r\n\t}\r\n\r\n    render()\r\n    {\r\n        return (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div style={{\r\n\t\t\t\tdisplay: this.state.loadingData,\r\n\t\t\t\tjustifyContent: 'center',\r\n\t\t\t\t}}>\r\n\t\t\t\t\t<Box sx={{ display: 'flex', mt: 1, mb: 2}}>\r\n\t\t\t\t\t\t<CustomCircularProgress/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</div>\r\n\r\n            <div style={{ height: 650, width: '99%', marginBottom: 15}}>\r\n\t\t\t\t<Box sx={{ml:1.5, mt:1.5, height: 650}}>\r\n\t\t\t\t\t<CustomDataGrid\r\n\t\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t\t\tdisableColumnMenu={true}\r\n\t\t\t\t\t\tonRowClick = {(data) => console.log(data['AUPRC'])} // log row data\r\n\t\t\t\t\t\tcomponents={{\r\n\t\t\t\t\t\t\tToolbar: MyExportButton,\r\n\t\t\t\t\t\t  }}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Box>\r\n            </div>\r\n\r\n\t\t\t{/* <Plot\r\n\t\t\t\tdata={[\r\n\t\t\t\t{\r\n\t\t\t\t\tx: this.state.plotX,\r\n\t\t\t\t\ty: this.state.plotY,\r\n\t\t\t\t\ttype: 'scatter',\r\n\t\t\t\t\tmode: 'markers',\r\n\t\t\t\t\tmarker: {color: 'red'},\r\n\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tlayout={ {width: '99%', height: 240, title: 'A Fancy Plot'} }\r\n\t\t\t/> */}\r\n\r\n\t\t\t</React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PerformanceDataTable;"]},"metadata":{},"sourceType":"module"}