{"ast":null,"code":"// gets the query and retuns the list of data from the query\n// works when query reutns only one column\nexport async function getList(reqURL, query) {\n  var list = []; // request URL\n\n  var req = reqURL + encodeURIComponent(query);\n  await fetch(req).then(data => data.text()).then(data => {\n    for (let i = 0; i < data.split('<literal>').length; i++) {\n      list[i] = data.split('<literal>')[i].split('</literal>')[0];\n    }\n\n    list.shift();\n    list.sort((a, b) => a.localeCompare(b, undefined, {\n      sensitivity: 'base'\n    })); // sort\n  }).catch(\"error\", err => {\n    console.log(err);\n  });\n  return list;\n}","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/src/components/utils.js"],"names":["getList","reqURL","query","list","req","encodeURIComponent","fetch","then","data","text","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","catch","err","console","log"],"mappings":"AAAA;AACA;AACA,OAAO,eAAeA,OAAf,CAAuBC,MAAvB,EAA+BC,KAA/B,EACP;AACC,MAAIC,IAAI,GAAG,EAAX,CADD,CAGC;;AACA,MAAIC,GAAG,GAAGH,MAAM,GAACI,kBAAkB,CAACH,KAAD,CAAnC;AAEA,QAAMI,KAAK,CAACF,GAAD,CAAL,CAAWG,IAAX,CAAiBC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAA1B,EACFF,IADE,CACGC,IAAI,IAAK;AAEhB,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,KAAL,CAAW,WAAX,EAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EACA;AACCP,MAAAA,IAAI,CAACO,CAAD,CAAJ,GAAUF,IAAI,CAACG,KAAL,CAAW,WAAX,EAAwBD,CAAxB,EAA2BC,KAA3B,CAAiC,YAAjC,EAA+C,CAA/C,CAAV;AACA;;AACDR,IAAAA,IAAI,CAACU,KAAL;AACAV,IAAAA,IAAI,CAACW,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,EAAmBE,SAAnB,EAA8B;AAACC,MAAAA,WAAW,EAAE;AAAd,KAA9B,CAApB,EAPgB,CAO2D;AACzE,GATE,EAULC,KAVK,CAUC,OAVD,EAUWC,GAAD,IAAS;AACxBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,GAZK,CAAN;AAcA,SAAOlB,IAAP;AACA","sourcesContent":["// gets the query and retuns the list of data from the query\r\n// works when query reutns only one column\r\nexport async function getList(reqURL, query)\r\n{\r\n\tvar list = [];\r\n\r\n\t// request URL\r\n\tvar req = reqURL+encodeURIComponent(query)\r\n\r\n\tawait fetch(req).then((data) => data.text())\r\n    .then(data  => {\r\n\r\n\t  for (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'})); // sort\r\n    })\r\n\t.catch(\"error\", (err) => {\r\n\t\tconsole.log(err)\r\n\t})  \r\n\t\r\n\treturn list;\r\n}"]},"metadata":{},"sourceType":"module"}