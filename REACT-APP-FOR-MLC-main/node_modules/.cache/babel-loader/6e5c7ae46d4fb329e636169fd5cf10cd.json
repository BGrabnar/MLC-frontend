{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { getList } from './utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst http = require('http');\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\n\t\tselect ?dataset_label\n\t\twhere {\n\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t?dataset rdfs:label ?dataset_labela_arff .\n\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\n\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\n\t\t}\n\t\t`;\n      this.setState({\n        datasetList: getList(query)\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      this.setState({\n        algorithmList: getList(query)\n      });\n    };\n\n    this.getEvaluationMeasureList = () => {\n      var query = `\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\n\n\t\t\tselect distinct ?measure_label {\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\n\t\t\t?measure rdfs:label ?measure_label .\n\t\t\tFILTER NOT EXISTS{\n\t\t\t?m rdfs:subClassOf ?measure \n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\n\t\t\t}\n\t\t\t}\n\t\t`;\n      this.setState({\n        evaluationMeasureList: getList(query)\n      }, () => {\n        console.log(\"evaluations loaded\");\n        console.log(this.state.evaluationMeasureList);\n        this.setEvaluationHTMLElements();\n      });\n    };\n\n    this.getRows = query => {\n      // columns\n      var columns = [{\n        field: 'id',\n        headerName: '',\n        width: 20\n      }, {\n        field: 'dataset',\n        headerName: 'Dataset',\n        width: 200\n      }, {\n        field: 'algorithm',\n        headerName: 'Method',\n        width: 200\n      }];\n\n      if (!this.state.validationFolds) {\n        for (let i = 0; i < this.state.evaluationMeasureList.length; i++) {\n          var subColumn = {\n            field: this.state.evaluationMeasureList[i],\n            width: 250\n          };\n          columns.push(subColumn);\n        }\n      } // rows\n\n\n      var list = []; // post request\n\n      var req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\" + encodeURIComponent(query);\n      http.get(req, resp => {\n        let data = ''; // A chunk of data has been received.\n\n        resp.on('data', chunk => {\n          data += chunk;\n        }); // The whole response has been received. Print out the result.\n\n        resp.on('end', () => {\n          // extract the dataset names from html\n          for (let i = 1; i < data.split('<result>').length; i++) {\n            var result = data.split('<result>')[i].split('<literal>');\n            var subList = {\n              id: i,\n              dataset: result[1].split('</literal>')[0],\n              algorithm: result[2].split('</literal>')[0]\n            };\n\n            for (let j = 0; j < this.state.evaluationMeasureList.length; j++) {\n              subList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1];\n            }\n\n            list.push(subList);\n          }\n\n          this.setState({\n            spreadSheetRows: list,\n            spreadSheetColumns: columns\n          });\n        });\n      }).on(\"error\", err => {\n        console.log(err);\n      });\n    };\n\n    this.getDataFromQuery = () => {\n      var filterString = \"\";\n\n      for (let i = 0; i < this.state.selectedDatasets.length; i++) {\n        if (i === 0) filterString += 'Filter (?datasetLabel in (\"';else filterString += '\", \"';\n        filterString += this.state.selectedDatasets[i];\n        if (i === this.state.selectedDatasets.length - 1) filterString += '\")).';\n      }\n\n      for (let i = 0; i < this.state.selectedAlgorithms.length; i++) {\n        if (i === 0) filterString += 'Filter (?Algorithm in (\"';else filterString += '\", \"';\n        filterString += this.state.selectedAlgorithms[i];\n        if (i === this.state.selectedAlgorithms.length - 1) filterString += '\")).';\n      }\n\n      console.log(filterString);\n      /* for (let j = 0; j < this.state.selectedAlgorithms.length; j++)\r\n      \t{\r\n      \t\tdatasetString += 'regex(?model_label, \"'+ this.state.selectedDatasets[i] +'\") && regex(?model_label, \"'+ this.state.selectedAlgorithms[j] +'\")';\r\n      \t} */\n\n      var query = `\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\t\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\n\t\tWHERE {\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\n\t\t?dataset rdfs:label ?datasetLabelArff .\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\n\t\t${filterString}\n\t\t}\n\t\tGROUP BY ?datasetLabel ?Algorithm \n\t\t`;\n      console.log(query);\n      this.getRows(query);\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvals: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      datasetList: [],\n      algorithmList: [],\n      evaluationMeasureList: [],\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadSheetColumns: [],\n      spreadSheetRows: [],\n      validationFolds: false,\n      selectedDatasets: [],\n      selectedAlgorithms: []\n    };\n  }\n\n  componentDidMount() {\n    this.getEvaluationMeasureList(); // this.setEvaluationHTMLElements()\n\n    this.getDatasets();\n    this.getAlgorithms();\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvals.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvals);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvals[i].id,\n            range: this.state.selectedEvals[i].range,\n            measure: this.state.selectedEvals[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures,\n            evaluationMeasureList: this.state.evaluationMeasureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvals[i].id),\n            disabled: this.state.selectedEvals.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvals[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].measure === null || this.state.selectedEvals[i].measure === '' || this.state.selectedEvals.length > 10 || this.state.selectedEvals[i].range === '' || !regex.test(this.state.selectedEvals[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvals;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvals[this.state.selectedEvals.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvals: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvals.length; i++) {\n      if (this.state.selectedEvals[i].id !== x) newSelectedEvals.push(this.state.selectedEvals[i]);\n    }\n\n    this.setState({\n      selectedEvals: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvals);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 8\n          }, this),\n          onChange: (event, value) => {\n            this.setState({\n              selectedDatasets: value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\"\n              });\n              this.setState({\n                validationFolds: true\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\"\n              });\n              this.setState({\n                validationFolds: false\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Validation\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 7\n        }, this),\n        onChange: (event, value) => {\n          this.setState({\n            selectedAlgorithms: value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: this.getDataFromQuery,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 400,\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(DataGrid, {\n          rows: this.state.spreadSheetRows,\n          columns: this.state.spreadSheetColumns,\n          pageSize: 10,\n          rowsPerPageOptions: [10]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","DataGrid","getList","http","require","Body","Component","constructor","props","getDatasets","query","setState","datasetList","getAlgorithms","algorithmList","getEvaluationMeasureList","evaluationMeasureList","console","log","state","setEvaluationHTMLElements","getRows","columns","field","headerName","width","validationFolds","i","length","subColumn","push","list","req","encodeURIComponent","get","resp","data","on","chunk","split","result","subList","id","dataset","algorithm","j","spreadSheetRows","spreadSheetColumns","err","getDataFromQuery","filterString","selectedDatasets","selectedAlgorithms","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","evaluationHTMLElements","selectedEvals","addButtonDisabled","disabledMeasures","foldsAutocompleteDisplayMode","componentDidMount","val","newSelectedEvals","forEach","el","measure","setDisabledMeasures","range","evals","newDisabledMeasures","regex","RegExp","test","x","render","params","event","value","display","height"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\nimport { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\nimport {getList} from './utils.js'\r\n\r\nconst http = require('http')\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n      \t\tselectedEvals: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\tevaluationMeasureList: [],\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: [],\r\n\t\t\tvalidationFolds: false,\r\n\t\t\tselectedDatasets: [],\r\n\t\t\tselectedAlgorithms: []\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.getEvaluationMeasureList()\r\n\t\t// this.setEvaluationHTMLElements()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t\t\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\r\n\t\tselect ?dataset_label\r\n\t\twhere {\r\n\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t?dataset rdfs:label ?dataset_labela_arff .\r\n\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\r\n\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\r\n\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\tdatasetList: getList(query)\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\talgorithmList: getList(query)\r\n\t\t})\r\n\t}\r\n\r\n\tgetEvaluationMeasureList=() => {\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\tPREFIX owl: <http://www.w3.org/2002/07/owl#>\r\n\r\n\t\t\tselect distinct ?measure_label {\r\n\t\t\t?measure rdfs:subClassOf <http://www.ontodm.com/OntoDM-core/ontoexp_0033>.\r\n\t\t\t?measure rdfs:label ?measure_label .\r\n\t\t\tFILTER NOT EXISTS{\r\n\t\t\t?m rdfs:subClassOf ?measure \r\n\t\t\tFILTER(?m!= ?measure && ?m!= owl:Nothing )\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tthis.setState({\r\n\t\t\tevaluationMeasureList: getList(query)\r\n\t\t}, ()=>{\r\n\t\t\tconsole.log(\"evaluations loaded\")\r\n\t\t\tconsole.log(this.state.evaluationMeasureList)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t})\r\n\t}\r\n\r\n\tgetRows = (query) =>\r\n\t{\r\n\t// columns\r\n\tvar columns = [\r\n\t\t{ field: 'id', headerName: '', width: 20},\r\n\t\t{ field: 'dataset', headerName: 'Dataset', width: 200 },\r\n\t\t{ field: 'algorithm', headerName: 'Method', width: 200 }\r\n\t];\r\n\r\n\tif (!this.state.validationFolds)\r\n\t{\r\n\r\n\t\tfor (let i = 0; i < this.state.evaluationMeasureList.length; i++)\r\n\t\t{\r\n\t\t\tvar subColumn = {\r\n\t\t\t\tfield: this.state.evaluationMeasureList[i], width: 250\r\n\t\t\t};\r\n\t\t\tcolumns.push(subColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t// rows\r\n\tvar list = [];\r\n\t// post request\r\n\tvar req = \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\"+encodeURIComponent(query)\r\n\thttp.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\t\tfor (let i = 1; i < data.split('<result>').length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar result = data.split('<result>')[i].split('<literal>');\r\n\r\n\t\t\t\t\tvar subList = {\r\n\t\t\t\t\t\tid: i,\r\n\t\t\t\t\t\tdataset: result[1].split('</literal>')[0],\r\n\t\t\t\t\t\talgorithm: result[2].split('</literal>')[0],\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tfor (let j = 0; j < this.state.evaluationMeasureList.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsubList[result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[0]] = result[3].split('</literal>')[0].split(\";\")[j].split(\":\")[1]\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tlist.push(subList);\r\n\t\t\t\t}\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tspreadSheetRows: list,\r\n\t\t\t\t\tspreadSheetColumns: columns\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t}\r\n\r\n\tgetDataFromQuery=()=>{\r\n\t\tvar filterString = \"\"\r\n\t\tfor (let i = 0; i < this.state.selectedDatasets.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?datasetLabel in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedDatasets[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedDatasets.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.state.selectedAlgorithms.length; i++)\r\n\t\t{\r\n\t\t\tif (i === 0)\r\n\t\t\t\tfilterString += 'Filter (?Algorithm in (\"'\r\n\t\t\telse\r\n\t\t\t\tfilterString += '\", \"'\r\n\t\t\tfilterString += this.state.selectedAlgorithms[i]\r\n\t\t\t\r\n\t\t\tif (i === this.state.selectedAlgorithms.length - 1)\r\n\t\t\t\tfilterString += '\")).'\r\n\t\t}\r\n\t\tconsole.log(filterString);\r\n\r\n\t\t/* for (let j = 0; j < this.state.selectedAlgorithms.length; j++)\r\n\t\t\t{\r\n\t\t\t\tdatasetString += 'regex(?model_label, \"'+ this.state.selectedDatasets[i] +'\") && regex(?model_label, \"'+ this.state.selectedAlgorithms[j] +'\")';\r\n\t\t\t} */\r\n\r\n\t\tvar query = `\r\n\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\t\r\n\t\tSELECT ?datasetLabel ?Algorithm (group_concat( concat(?evaluationMeasureClassLabel , \":\", ?value) ;separator=\";\") as ?EvaluationMeasures)\r\n\t\tWHERE {\r\n\t\t?trainTestDatasetAssignment <http://purl.obolibrary.org/obo/OBI_0000293> ?dataset.\r\n\t\t?trainTestDatasetAssignment ?precedes ?predictiveModelTrainTestEvaluationWorkflowExecution .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelTestSetEvaluationCalculation.\r\n\t\t?dataset rdfs:label ?datasetLabelArff .\r\n\t\t?predictiveModelTrainTestEvaluationWorkflowExecution <http://purl.obolibrary.org/obo/BFO_0000051> ?predictiveModelingAlgorithmExecution.\r\n\t\t?predictiveModelingAlgorithmExecution <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?Algorithm .\r\n\t\t?predictiveModelTestSetEvaluationCalculation rdf:type <http://www.ontodm.com/OntoDM-core/ontoexp_0064>.\r\n\t\t?predictiveModelTestSetEvaluationCalculation <http://purl.obolibrary.org/obo/BFO_0000051> ?evaluationMeasuresCalculation.\r\n\t\t?evaluationMeasuresCalculation ?realizes ?predictiveModelingEvaluationCalculationImplementation.\r\n\t\t?predictiveModelingEvaluationCalculationImplementation ?isConcretizationOf ?evaluationMeasure.\r\n\t\t?evaluationMeasure <http://www.ontodm.com/OntoDT#OntoDT_0000240>  ?value.\r\n\t\t?evaluationMeasure rdfs:label ?evaluationMeasure_label.\r\n        ?evaluationMeasure rdf:type ?evaluationMeasureClass .\r\n        ?evaluationMeasureClass rdfs:label ?evaluationMeasureClassLabel .\r\n\t\tBIND(REPLACE(?datasetLabelArff , \".arff\", \"\")  AS ?datasetLabel ).\r\n\t\t${filterString}\r\n\t\t}\r\n\t\tGROUP BY ?datasetLabel ?Algorithm \r\n\t\t`\r\n\t\tconsole.log(query);\r\n\t\tthis.getRows(query)\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvals.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvals)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvals[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvals[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvals[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t\tevaluationMeasureList ={this.state.evaluationMeasureList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvals[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvals.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvals[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvals[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvals.length>10 ||\r\n\t\t\t\tthis.state.selectedEvals[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvals[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvals\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvals[this.state.selectedEvals.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvals.length; i++){\r\n\t\t\tif(this.state.selectedEvals[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvals[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvals: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvals)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tthis.setState({selectedDatasets : value});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: true});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({foldsAutocompleteDisplayMode : \"none\"});\r\n\t\t\t\t\t\t\t\tthis.setState({validationFolds: false});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\tthis.setState({selectedAlgorithms : value});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={this.getDataFromQuery}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t<div style={{ height: 400, width: '100%' }}>\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}