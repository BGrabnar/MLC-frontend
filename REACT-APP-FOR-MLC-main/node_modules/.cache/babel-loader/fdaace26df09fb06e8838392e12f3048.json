{"ast":null,"code":"const http = require('http'); // gets the query and retuns the list of data from the query\n\n\nexport async function getList(reqURL, query) {\n  var list = []; // post request\n\n  var req = reqURL + encodeURIComponent(query);\n  let response = http.get(req, resp => {\n    let data = ''; // A chunk of data has been received.\n\n    resp.on('data', chunk => {\n      data += chunk;\n    }); // The whole response has been received. Print out the result.\n\n    resp.on('end', () => {\n      // extract the dataset names from html\n      for (let i = 0; i < data.split('<literal>').length; i++) {\n        list[i] = data.split('<literal>')[i].split('</literal>')[0];\n      }\n\n      list.shift();\n      list.sort((a, b) => a.localeCompare(b, undefined, {\n        sensitivity: 'base'\n      })); // sort\n    });\n  }).on(\"error\", err => {\n    console.log(err);\n  }); //await fetch(req).then(data => console.log(data));\n\n  console.log(list);\n  console.log(await list);\n  console.log(await response.blob());\n  return await Promise.resolve(list);\n}","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/utils.js"],"names":["http","require","getList","reqURL","query","list","req","encodeURIComponent","response","get","resp","data","on","chunk","i","split","length","shift","sort","a","b","localeCompare","undefined","sensitivity","err","console","log","blob","Promise","resolve"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,OAAO,eAAeC,OAAf,CAAuBC,MAAvB,EAA+BC,KAA/B,EACP;AACC,MAAIC,IAAI,GAAG,EAAX,CADD,CAGC;;AACA,MAAIC,GAAG,GAAGH,MAAM,GAACI,kBAAkB,CAACH,KAAD,CAAnC;AACA,MAAII,QAAQ,GAAGR,IAAI,CAACS,GAAL,CAASH,GAAT,EAAeI,IAAD,IAAU;AACtC,QAAIC,IAAI,GAAG,EAAX,CADsC,CAGtC;;AACAD,IAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAiBC,KAAD,IAAW;AAC1BF,MAAAA,IAAI,IAAIE,KAAR;AACA,KAFD,EAJsC,CAQtC;;AACAH,IAAAA,IAAI,CACHE,EADD,CACI,KADJ,EACW,MAAM;AAChB;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,KAAL,CAAW,WAAX,EAAwBC,MAA5C,EAAoDF,CAAC,EAArD,EACA;AACCT,QAAAA,IAAI,CAACS,CAAD,CAAJ,GAAUH,IAAI,CAACI,KAAL,CAAW,WAAX,EAAwBD,CAAxB,EAA2BC,KAA3B,CAAiC,YAAjC,EAA+C,CAA/C,CAAV;AACA;;AACDV,MAAAA,IAAI,CAACY,KAAL;AACAZ,MAAAA,IAAI,CAACa,IAAL,CAAU,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,EAAmBE,SAAnB,EAA8B;AAACC,QAAAA,WAAW,EAAE;AAAd,OAA9B,CAApB,EAPgB,CAO2D;AAC1E,KATF;AAUC,GAnBa,EAoBbX,EApBa,CAoBV,OApBU,EAoBAY,GAAD,IAAS;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,GAtBa,CAAf,CALD,CA8BC;;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;AACDoB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAOrB,IAAnB;AACAoB,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAMlB,QAAQ,CAACmB,IAAT,EAAlB;AACA,SAAO,MAAMC,OAAO,CAACC,OAAR,CAAgBxB,IAAhB,CAAb;AACA","sourcesContent":["const http = require('http')\r\n\r\n// gets the query and retuns the list of data from the query\r\nexport async function getList(reqURL, query)\r\n{\r\n\tvar list = [];\r\n\r\n\t// post request\r\n\tvar req = reqURL+encodeURIComponent(query)\r\n\tlet response = http.get(req, (resp) => {\r\n\t\tlet data = '';\r\n\t\t\r\n\t\t// A chunk of data has been received.\r\n\t\tresp.on('data', (chunk) => {\r\n\t\t\tdata += chunk;\r\n\t\t});\r\n\t\t\r\n\t\t// The whole response has been received. Print out the result.\r\n\t\tresp\r\n\t\t.on('end', () => {\r\n\t\t\t// extract the dataset names from html\r\n\t\t\tfor (let i = 0; i < data.split('<literal>').length; i++)\r\n\t\t\t{\r\n\t\t\t\tlist[i] = data.split('<literal>')[i].split('</literal>')[0];\r\n\t\t\t}\r\n\t\t\tlist.shift();\r\n\t\t\tlist.sort((a, b) => a.localeCompare(b, undefined, {sensitivity: 'base'})); // sort\r\n\t\t\t});\r\n\t\t})\r\n\t\t.on(\"error\", (err) => {\r\n\t\t\tconsole.log(err)\r\n\t\t});\r\n\t\r\n\r\n\t//await fetch(req).then(data => console.log(data));\r\n\t\tconsole.log(list);\r\n\tconsole.log(await (list));\r\n\tconsole.log(await response.blob());\r\n\treturn await Promise.resolve(list);\r\n}"]},"metadata":{},"sourceType":"module"}