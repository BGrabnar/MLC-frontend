{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\nvar Color = require('../../components/color');\n\nvar Template = require('../../plot_api/plot_template');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\n\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar handleTickValueDefaults = require('../cartesian/tick_value_defaults');\n\nvar handleTickMarkDefaults = require('../cartesian/tick_mark_defaults');\n\nvar handleTickLabelDefaults = require('../cartesian/tick_label_defaults');\n\nvar handlePrefixSuffixDefaults = require('../cartesian/prefix_suffix_defaults');\n\nvar handleCategoryOrderDefaults = require('../cartesian/category_order_defaults');\n\nvar handleLineGridDefaults = require('../cartesian/line_grid_defaults');\n\nvar autoType = require('../cartesian/axis_autotype');\n\nvar layoutAttributes = require('./layout_attributes');\n\nvar setConvert = require('./set_convert');\n\nvar constants = require('./constants');\n\nvar axisNames = constants.axisNames;\n\nfunction handleDefaults(contIn, contOut, coerce, opts) {\n  var bgColor = coerce('bgcolor');\n  opts.bgColor = Color.combine(bgColor, opts.paper_bgcolor);\n  var sector = coerce('sector');\n  coerce('hole'); // could optimize, subplotData is not always needed!\n\n  var subplotData = getSubplotData(opts.fullData, constants.name, opts.id);\n  var layoutOut = opts.layoutOut;\n  var axName;\n\n  function coerceAxis(attr, dflt) {\n    return coerce(axName + '.' + attr, dflt);\n  }\n\n  for (var i = 0; i < axisNames.length; i++) {\n    axName = axisNames[i];\n\n    if (!Lib.isPlainObject(contIn[axName])) {\n      contIn[axName] = {};\n    }\n\n    var axIn = contIn[axName];\n    var axOut = Template.newContainer(contOut, axName);\n    axOut._id = axOut._name = axName;\n    axOut._attr = opts.id + '.' + axName;\n    axOut._traceIndices = subplotData.map(function (t) {\n      return t._expandedIndex;\n    });\n    var dataAttr = constants.axisName2dataArray[axName];\n    var axType = handleAxisTypeDefaults(axIn, axOut, coerceAxis, subplotData, dataAttr, opts);\n    handleCategoryOrderDefaults(axIn, axOut, coerceAxis, {\n      axData: subplotData,\n      dataAttr: dataAttr\n    });\n    var visible = coerceAxis('visible');\n    setConvert(axOut, contOut, layoutOut);\n    coerceAxis('uirevision', contOut.uirevision); // We don't want to make downstream code call ax.setScale,\n    // as both radial and angular axes don't have a set domain.\n    // Furthermore, angular axes don't have a set range.\n    //\n    // Mocked domains and ranges are set by the polar subplot instances,\n    // but Axes.findExtremes uses the sign of _m to determine which padding value\n    // to use.\n    //\n    // By setting, _m to 1 here, we make Axes.findExtremes think that\n    // range[1] > range[0], and vice-versa for `autorange: 'reversed'` below.\n\n    axOut._m = 1;\n\n    switch (axName) {\n      case 'radialaxis':\n        var autoRange = coerceAxis('autorange', !axOut.isValidRange(axIn.range));\n        axIn.autorange = autoRange;\n        if (autoRange && (axType === 'linear' || axType === '-')) coerceAxis('rangemode');\n        if (autoRange === 'reversed') axOut._m = -1;\n        coerceAxis('range');\n        axOut.cleanRange('range', {\n          dfltRange: [0, 1]\n        });\n        break;\n\n      case 'angularaxis':\n        // We do not support 'true' date angular axes yet,\n        // users can still plot dates on angular axes by setting\n        // `angularaxis.type: 'category'`.\n        //\n        // Here, if a date angular axes is detected, we make\n        // all its corresponding traces invisible, so that\n        // when we do add support for data angular axes, the new\n        // behavior won't conflict with existing behavior\n        if (axType === 'date') {\n          Lib.log('Polar plots do not support date angular axes yet.');\n\n          for (var j = 0; j < subplotData.length; j++) {\n            subplotData[j].visible = false;\n          } // turn this into a 'dummy' linear axis so that\n          // the subplot still renders ok\n\n\n          axType = axIn.type = axOut.type = 'linear';\n        }\n\n        if (axType === 'linear') {\n          coerceAxis('thetaunit');\n        } else {\n          coerceAxis('period');\n        }\n\n        var direction = coerceAxis('direction');\n        coerceAxis('rotation', {\n          counterclockwise: 0,\n          clockwise: 90\n        }[direction]);\n        break;\n    }\n\n    handlePrefixSuffixDefaults(axIn, axOut, coerceAxis, axOut.type, {\n      tickSuffixDflt: axOut.thetaunit === 'degrees' ? 'Â°' : undefined\n    });\n\n    if (visible) {\n      var dfltColor;\n      var dfltFontColor;\n      var dfltFontSize;\n      var dfltFontFamily;\n      var font = opts.font || {};\n      dfltColor = coerceAxis('color');\n      dfltFontColor = dfltColor === axIn.color ? dfltColor : font.color;\n      dfltFontSize = font.size;\n      dfltFontFamily = font.family;\n      handleTickValueDefaults(axIn, axOut, coerceAxis, axOut.type);\n      handleTickLabelDefaults(axIn, axOut, coerceAxis, axOut.type, {\n        font: {\n          color: dfltFontColor,\n          size: dfltFontSize,\n          family: dfltFontFamily\n        }\n      });\n      handleTickMarkDefaults(axIn, axOut, coerceAxis, {\n        outerTicks: true\n      });\n      handleLineGridDefaults(axIn, axOut, coerceAxis, {\n        dfltColor: dfltColor,\n        bgColor: opts.bgColor,\n        // default grid color is darker here (60%, vs cartesian default ~91%)\n        // because the grid is not square so the eye needs heavier cues to follow\n        blend: 60,\n        showLine: true,\n        showGrid: true,\n        noZeroLine: true,\n        attributes: layoutAttributes[axName]\n      });\n      coerceAxis('layer');\n\n      if (axName === 'radialaxis') {\n        coerceAxis('side');\n        coerceAxis('angle', sector[0]);\n        coerceAxis('title.text');\n        Lib.coerceFont(coerceAxis, 'title.font', {\n          color: dfltFontColor,\n          size: Lib.bigFont(dfltFontSize),\n          family: dfltFontFamily\n        });\n      }\n    }\n\n    if (axType !== 'category') coerceAxis('hoverformat');\n    axOut._input = axIn;\n  }\n\n  if (contOut.angularaxis.type === 'category') {\n    coerce('gridshape');\n  }\n}\n\nfunction handleAxisTypeDefaults(axIn, axOut, coerce, subplotData, dataAttr, options) {\n  var autotypenumbers = coerce('autotypenumbers', options.autotypenumbersDflt);\n  var axType = coerce('type');\n\n  if (axType === '-') {\n    var trace;\n\n    for (var i = 0; i < subplotData.length; i++) {\n      if (subplotData[i].visible) {\n        trace = subplotData[i];\n        break;\n      }\n    }\n\n    if (trace && trace[dataAttr]) {\n      axOut.type = autoType(trace[dataAttr], 'gregorian', {\n        noMultiCategory: true,\n        autotypenumbers: autotypenumbers\n      });\n    }\n\n    if (axOut.type === '-') {\n      axOut.type = 'linear';\n    } else {\n      // copy autoType back to input axis\n      // note that if this object didn't exist\n      // in the input layout, we have to put it in\n      // this happens in the main supplyDefaults function\n      axIn.type = axOut.type;\n    }\n  }\n\n  return axOut.type;\n}\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n  handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n    type: constants.name,\n    attributes: layoutAttributes,\n    handleDefaults: handleDefaults,\n    font: layoutOut.font,\n    autotypenumbersDflt: layoutOut.autotypenumbers,\n    paper_bgcolor: layoutOut.paper_bgcolor,\n    fullData: fullData,\n    layoutOut: layoutOut\n  });\n};","map":{"version":3,"sources":["C:/Users/Ajax/Desktop/Praksa/React/REACT-APP-FOR-MLC-main/node_modules/plotly.js/src/plots/polar/layout_defaults.js"],"names":["Lib","require","Color","Template","handleSubplotDefaults","getSubplotData","handleTickValueDefaults","handleTickMarkDefaults","handleTickLabelDefaults","handlePrefixSuffixDefaults","handleCategoryOrderDefaults","handleLineGridDefaults","autoType","layoutAttributes","setConvert","constants","axisNames","handleDefaults","contIn","contOut","coerce","opts","bgColor","combine","paper_bgcolor","sector","subplotData","fullData","name","id","layoutOut","axName","coerceAxis","attr","dflt","i","length","isPlainObject","axIn","axOut","newContainer","_id","_name","_attr","_traceIndices","map","t","_expandedIndex","dataAttr","axisName2dataArray","axType","handleAxisTypeDefaults","axData","visible","uirevision","_m","autoRange","isValidRange","range","autorange","cleanRange","dfltRange","log","j","type","direction","counterclockwise","clockwise","tickSuffixDflt","thetaunit","undefined","dfltColor","dfltFontColor","dfltFontSize","dfltFontFamily","font","color","size","family","outerTicks","blend","showLine","showGrid","noZeroLine","attributes","coerceFont","bigFont","_input","angularaxis","options","autotypenumbers","autotypenumbersDflt","trace","noMultiCategory","module","exports","supplyLayoutDefaults","layoutIn"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar Color = require('../../components/color');\nvar Template = require('../../plot_api/plot_template');\n\nvar handleSubplotDefaults = require('../subplot_defaults');\nvar getSubplotData = require('../get_data').getSubplotData;\n\nvar handleTickValueDefaults = require('../cartesian/tick_value_defaults');\nvar handleTickMarkDefaults = require('../cartesian/tick_mark_defaults');\nvar handleTickLabelDefaults = require('../cartesian/tick_label_defaults');\nvar handlePrefixSuffixDefaults = require('../cartesian/prefix_suffix_defaults');\nvar handleCategoryOrderDefaults = require('../cartesian/category_order_defaults');\nvar handleLineGridDefaults = require('../cartesian/line_grid_defaults');\nvar autoType = require('../cartesian/axis_autotype');\n\nvar layoutAttributes = require('./layout_attributes');\nvar setConvert = require('./set_convert');\nvar constants = require('./constants');\nvar axisNames = constants.axisNames;\n\nfunction handleDefaults(contIn, contOut, coerce, opts) {\n    var bgColor = coerce('bgcolor');\n    opts.bgColor = Color.combine(bgColor, opts.paper_bgcolor);\n\n    var sector = coerce('sector');\n    coerce('hole');\n\n    // could optimize, subplotData is not always needed!\n    var subplotData = getSubplotData(opts.fullData, constants.name, opts.id);\n    var layoutOut = opts.layoutOut;\n    var axName;\n\n    function coerceAxis(attr, dflt) {\n        return coerce(axName + '.' + attr, dflt);\n    }\n\n    for(var i = 0; i < axisNames.length; i++) {\n        axName = axisNames[i];\n\n        if(!Lib.isPlainObject(contIn[axName])) {\n            contIn[axName] = {};\n        }\n\n        var axIn = contIn[axName];\n        var axOut = Template.newContainer(contOut, axName);\n        axOut._id = axOut._name = axName;\n        axOut._attr = opts.id + '.' + axName;\n        axOut._traceIndices = subplotData.map(function(t) { return t._expandedIndex; });\n\n        var dataAttr = constants.axisName2dataArray[axName];\n        var axType = handleAxisTypeDefaults(axIn, axOut, coerceAxis, subplotData, dataAttr, opts);\n\n        handleCategoryOrderDefaults(axIn, axOut, coerceAxis, {\n            axData: subplotData,\n            dataAttr: dataAttr\n        });\n\n        var visible = coerceAxis('visible');\n        setConvert(axOut, contOut, layoutOut);\n\n        coerceAxis('uirevision', contOut.uirevision);\n\n        // We don't want to make downstream code call ax.setScale,\n        // as both radial and angular axes don't have a set domain.\n        // Furthermore, angular axes don't have a set range.\n        //\n        // Mocked domains and ranges are set by the polar subplot instances,\n        // but Axes.findExtremes uses the sign of _m to determine which padding value\n        // to use.\n        //\n        // By setting, _m to 1 here, we make Axes.findExtremes think that\n        // range[1] > range[0], and vice-versa for `autorange: 'reversed'` below.\n        axOut._m = 1;\n\n        switch(axName) {\n            case 'radialaxis':\n                var autoRange = coerceAxis('autorange', !axOut.isValidRange(axIn.range));\n                axIn.autorange = autoRange;\n                if(autoRange && (axType === 'linear' || axType === '-')) coerceAxis('rangemode');\n                if(autoRange === 'reversed') axOut._m = -1;\n\n                coerceAxis('range');\n                axOut.cleanRange('range', {dfltRange: [0, 1]});\n                break;\n\n            case 'angularaxis':\n                // We do not support 'true' date angular axes yet,\n                // users can still plot dates on angular axes by setting\n                // `angularaxis.type: 'category'`.\n                //\n                // Here, if a date angular axes is detected, we make\n                // all its corresponding traces invisible, so that\n                // when we do add support for data angular axes, the new\n                // behavior won't conflict with existing behavior\n                if(axType === 'date') {\n                    Lib.log('Polar plots do not support date angular axes yet.');\n\n                    for(var j = 0; j < subplotData.length; j++) {\n                        subplotData[j].visible = false;\n                    }\n\n                    // turn this into a 'dummy' linear axis so that\n                    // the subplot still renders ok\n                    axType = axIn.type = axOut.type = 'linear';\n                }\n\n                if(axType === 'linear') {\n                    coerceAxis('thetaunit');\n                } else {\n                    coerceAxis('period');\n                }\n\n                var direction = coerceAxis('direction');\n                coerceAxis('rotation', {counterclockwise: 0, clockwise: 90}[direction]);\n                break;\n        }\n\n        handlePrefixSuffixDefaults(axIn, axOut, coerceAxis, axOut.type, {\n            tickSuffixDflt: axOut.thetaunit === 'degrees' ? 'Â°' : undefined\n        });\n\n        if(visible) {\n            var dfltColor;\n            var dfltFontColor;\n            var dfltFontSize;\n            var dfltFontFamily;\n            var font = opts.font || {};\n\n            dfltColor = coerceAxis('color');\n            dfltFontColor = (dfltColor === axIn.color) ? dfltColor : font.color;\n            dfltFontSize = font.size;\n            dfltFontFamily = font.family;\n\n            handleTickValueDefaults(axIn, axOut, coerceAxis, axOut.type);\n            handleTickLabelDefaults(axIn, axOut, coerceAxis, axOut.type, {\n                font: {\n                    color: dfltFontColor,\n                    size: dfltFontSize,\n                    family: dfltFontFamily\n                }\n            });\n\n            handleTickMarkDefaults(axIn, axOut, coerceAxis, {outerTicks: true});\n\n            handleLineGridDefaults(axIn, axOut, coerceAxis, {\n                dfltColor: dfltColor,\n                bgColor: opts.bgColor,\n                // default grid color is darker here (60%, vs cartesian default ~91%)\n                // because the grid is not square so the eye needs heavier cues to follow\n                blend: 60,\n                showLine: true,\n                showGrid: true,\n                noZeroLine: true,\n                attributes: layoutAttributes[axName]\n            });\n\n            coerceAxis('layer');\n\n            if(axName === 'radialaxis') {\n                coerceAxis('side');\n                coerceAxis('angle', sector[0]);\n\n                coerceAxis('title.text');\n                Lib.coerceFont(coerceAxis, 'title.font', {\n                    color: dfltFontColor,\n                    size: Lib.bigFont(dfltFontSize),\n                    family: dfltFontFamily\n                });\n            }\n        }\n\n        if(axType !== 'category') coerceAxis('hoverformat');\n\n        axOut._input = axIn;\n    }\n\n    if(contOut.angularaxis.type === 'category') {\n        coerce('gridshape');\n    }\n}\n\nfunction handleAxisTypeDefaults(axIn, axOut, coerce, subplotData, dataAttr, options) {\n    var autotypenumbers = coerce('autotypenumbers', options.autotypenumbersDflt);\n    var axType = coerce('type');\n\n    if(axType === '-') {\n        var trace;\n\n        for(var i = 0; i < subplotData.length; i++) {\n            if(subplotData[i].visible) {\n                trace = subplotData[i];\n                break;\n            }\n        }\n\n        if(trace && trace[dataAttr]) {\n            axOut.type = autoType(trace[dataAttr], 'gregorian', {\n                noMultiCategory: true,\n                autotypenumbers: autotypenumbers\n            });\n        }\n\n        if(axOut.type === '-') {\n            axOut.type = 'linear';\n        } else {\n            // copy autoType back to input axis\n            // note that if this object didn't exist\n            // in the input layout, we have to put it in\n            // this happens in the main supplyDefaults function\n            axIn.type = axOut.type;\n        }\n    }\n\n    return axOut.type;\n}\n\nmodule.exports = function supplyLayoutDefaults(layoutIn, layoutOut, fullData) {\n    handleSubplotDefaults(layoutIn, layoutOut, fullData, {\n        type: constants.name,\n        attributes: layoutAttributes,\n        handleDefaults: handleDefaults,\n        font: layoutOut.font,\n        autotypenumbersDflt: layoutOut.autotypenumbers,\n        paper_bgcolor: layoutOut.paper_bgcolor,\n        fullData: fullData,\n        layoutOut: layoutOut\n    });\n};\n"]},"metadata":{},"sourceType":"script"}