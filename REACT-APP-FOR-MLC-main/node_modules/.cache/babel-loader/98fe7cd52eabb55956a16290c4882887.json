{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Andrej\\\\Documents\\\\React\\\\REACT-APP-FOR-MLC-main\\\\src\\\\components\\\\BenchmarkDataFilter.jsx\";\nimport React from 'react'; // import { Datasets, Methods} from './dataOptions';\n\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\nimport { Autocomplete } from '@mui/material';\nimport { Button, TextField } from '@material-ui/core';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Grid } from '@material-ui/core'; //import { Methods } from './dataOptions';\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\n\nimport { getList } from './utils.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Body extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getDatasets = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\t\t\t\n\t\t\tselect ?dataset_label\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\n\t\t\t}\n\t\t`;\n      getList(this.state.reqURL, query).then(value => {\n        this.setState({\n          datasetList: value\n        });\n      });\n    };\n\n    this.getAlgorithms = () => {\n      var query = `\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\n\t\t\tselect distinct ?algorithm_name\n\t\t\twhere {\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\n\t\t\t}\n\t\t`;\n      getList(this.state.reqURL, query).then(value => {\n        this.setState({\n          algorithmList: value\n        });\n      });\n    };\n\n    this.parentHandleMeasure = this.parentHandleMeasure.bind(this);\n    this.parentHandleRange = this.parentHandleRange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.handleRemove = this.handleRemove.bind(this);\n    this.state = {\n      evaluationHTMLElements: [],\n      selectedEvaluationMeasures: [{\n        \"measure\": \"\",\n        \"range\": \"\",\n        \"id\": 0\n      }],\n      addButtonDisabled: true,\n      disabledMeasures: [],\n      reqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\n      datasetList: [],\n      algorithmList: [],\n      evaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\n      evaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\n      evaluationMeasureList: this.state.evaluationMeasureListTrainTest,\n      foldsAutocompleteDisplayMode: \"none\",\n      spreadSheetColumns: [],\n      spreadSheetRows: [],\n      validationFolds: false,\n      selectedDatasets: [],\n      selectedAlgorithms: [],\n      filterString: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.setEvaluationMeasures();\n    this.getDatasets();\n    this.getAlgorithms();\n  }\n\n  setEvaluationMeasures() //sets list and sets up for other evaluation elements\n  {\n    this.setState({\n      evaluationMeasureList: this.state.evaluationMeasureListTrainTest\n    }, () => {\n      this.setEvaluationHTMLElements();\n    });\n  } // gets the names of the datasets\n\n\n  parentHandleMeasure(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvaluationMeasures.forEach(el => {\n      if (el.id === id) {\n        el.measure = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  parentHandleRange(val, id) {\n    let newSelectedEvals = [];\n    this.state.selectedEvaluationMeasures.forEach(el => {\n      if (el.id === id) {\n        el.range = val;\n      }\n\n      newSelectedEvals.push(el);\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    });\n    this.setDisabledMeasures();\n    this.addButtonDisabled();\n  }\n\n  setEvaluationHTMLElements() {\n    console.log(\"set HTML\");\n    console.log(this.state.selectedEvaluationMeasures);\n    const evals = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      evals.push( /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(EvaluationMeasureRange, {\n            onHandleMeasureChange: this.parentHandleMeasure,\n            id: this.state.selectedEvaluationMeasures[i].id,\n            range: this.state.selectedEvaluationMeasures[i].range,\n            measure: this.state.selectedEvaluationMeasures[i].measure,\n            onHandleRangeChange: this.parentHandleRange,\n            disabledMeasures: this.state.disabledMeasures,\n            evaluationMeasureList: this.state.evaluationMeasureList\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: () => this.handleRemove(this.state.selectedEvaluationMeasures[i].id),\n            disabled: this.state.selectedEvaluationMeasures.length === 1,\n            children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this));\n    }\n\n    this.setState({\n      evaluationHTMLElements: evals\n    });\n    console.log(evals);\n    this.setDisabledMeasures();\n  }\n\n  setDisabledMeasures() {\n    const newDisabledMeasures = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      newDisabledMeasures.push(this.state.selectedEvaluationMeasures[i].measure);\n    }\n\n    this.setState({\n      disabledMeasures: newDisabledMeasures\n    });\n  }\n\n  addButtonDisabled() {\n    const regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/);\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      if (this.state.selectedEvaluationMeasures[i].measure === null || this.state.selectedEvaluationMeasures[i].measure === '' || this.state.selectedEvaluationMeasures.length > 10 || this.state.selectedEvaluationMeasures[i].range === '' || !regex.test(this.state.selectedEvaluationMeasures[i].range)) {\n        this.setState({\n          addButtonDisabled: true\n        });\n      } else {\n        this.setState({\n          addButtonDisabled: false\n        });\n      }\n    }\n  }\n\n  handleAdd() {\n    let newSelectedEvals = this.state.selectedEvaluationMeasures;\n    newSelectedEvals.push({\n      \"measure\": \"\",\n      \"range\": \"\",\n      \"id\": this.state.selectedEvaluationMeasures[this.state.selectedEvaluationMeasures.length - 1].id + 1\n    });\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals,\n      addButtonDisabled: true\n    }, () => {\n      console.log(\"handle add\");\n      console.log(this.state.selectedEvaluationMeasures);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  handleRemove(x) {\n    console.log(\"handle remove \" + x);\n    let newSelectedEvals = [];\n\n    for (let i = 0; i < this.state.selectedEvaluationMeasures.length; i++) {\n      if (this.state.selectedEvaluationMeasures[i].id !== x) newSelectedEvals.push(this.state.selectedEvaluationMeasures[i]);\n    }\n\n    this.setState({\n      selectedEvaluationMeasures: newSelectedEvals\n    }, () => {\n      console.log(\"handle remove\");\n      console.log(this.state.selectedEvaluationMeasures);\n      this.setEvaluationHTMLElements();\n      this.addButtonDisabled();\n      this.setDisabledMeasures();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 0,\n        children: [/*#__PURE__*/_jsxDEV(Autocomplete // Dataset input field\n        , {\n          multiple: true,\n          limitTags: 50,\n          options: this.state.datasetList,\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Datasets\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 8\n          }, this),\n          onChange: (event, value) => {\n            this.setState({\n              selectedDatasets: value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(Autocomplete // split input field\n        , {\n          defaultValue: \"train / test\",\n          onChange: (event, value) => {\n            if (value === \"folds\") {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"\",\n                validationFolds: true,\n                evaluationMeasureList: this.state.evaluationMeasureListFolds\n              }, () => {\n                this.setEvaluationHTMLElements();\n              });\n            } else {\n              this.setState({\n                foldsAutocompleteDisplayMode: \"none\",\n                validationFolds: false,\n                evaluationMeasureList: this.state.evaluationMeasureListTrainTest\n              }, () => {\n                this.setEvaluationHTMLElements();\n              });\n            }\n          },\n          multiple: false,\n          limitTags: 2,\n          options: [\"folds\", \"train / test\"],\n          sx: {\n            width: 300\n          },\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n            variant: \"outlined\",\n            label: \"Validation\",\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // methods input field\n      , {\n        multiple: true,\n        limitTags: 3,\n        options: this.state.algorithmList,\n        sx: {\n          width: 300\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Methods\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 7\n        }, this),\n        onChange: (event, value) => {\n          this.setState({\n            selectedAlgorithms: value\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Autocomplete // folds input field\n      , {\n        multiple: true,\n        limitTags: 50,\n        options: [\"1\", \"2\", \"3\"],\n        sx: {\n          width: 300,\n          display: this.state.foldsAutocompleteDisplayMode\n        },\n        renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n          variant: \"outlined\",\n          label: \"Fold\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 5\n      }, this), this.state.evaluationHTMLElements, /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.handleAdd,\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Button // filter / sumbmit button\n      , {\n        color: \"secondary\",\n        variant: \"contained\",\n        onClick: () => this.callPerformanceDataTableMethod(),\n        disabled: false // before: this.state.addButtonDisabled\n        ,\n        children: \"FILTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(PerformanceDataTable, {\n        setFilter: click => this.callPerformanceDataTableMethod = click,\n        selectedDatasets: this.state.selectedDatasets,\n        selectedAlgorithms: this.state.selectedAlgorithms,\n        evaluationMeasureList: this.state.evaluationMeasureList,\n        validationFolds: this.state.validationFolds,\n        selectedEvaluationMeasures: this.state.selectedEvaluationMeasures\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default Body;","map":{"version":3,"sources":["C:/Users/Andrej/Documents/React/REACT-APP-FOR-MLC-main/src/components/BenchmarkDataFilter.jsx"],"names":["React","EvaluationMeasureRange","PerformanceDataTable","Autocomplete","Button","TextField","AddIcon","DeleteIcon","Grid","getList","Body","Component","constructor","props","getDatasets","query","state","reqURL","then","value","setState","datasetList","getAlgorithms","algorithmList","parentHandleMeasure","bind","parentHandleRange","handleAdd","handleRemove","evaluationHTMLElements","selectedEvaluationMeasures","addButtonDisabled","disabledMeasures","evaluationMeasureListTrainTest","evaluationMeasureListFolds","evaluationMeasureList","foldsAutocompleteDisplayMode","spreadSheetColumns","spreadSheetRows","validationFolds","selectedDatasets","selectedAlgorithms","filterString","componentDidMount","setEvaluationMeasures","setEvaluationHTMLElements","val","id","newSelectedEvals","forEach","el","measure","push","setDisabledMeasures","range","console","log","evals","i","length","newDisabledMeasures","regex","RegExp","test","x","render","width","params","event","display","callPerformanceDataTableMethod","click"],"mappings":"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","sourcesContent":["import React from 'react';\r\n// import { Datasets, Methods} from './dataOptions';\r\nimport EvaluationMeasureRange from './EvaluationMeasureRange';\r\nimport PerformanceDataTable from './PerformanceDataTable.jsx';\r\nimport { Autocomplete } from '@mui/material';\r\nimport { Button, TextField } from '@material-ui/core';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport { Grid } from '@material-ui/core';\r\n//import { Methods } from './dataOptions';\r\n//import { DataGrid } from '@material-ui/data-grid'; //npm install @material-ui/data-grid\r\nimport {getList} from './utils.js'\r\n\r\nclass Body extends React.Component {\r\n\r\n\tconstructor(props) {\r\n    \tsuper(props);\r\n\t\tthis.parentHandleMeasure = this.parentHandleMeasure.bind(this);\r\n\t\tthis.parentHandleRange = this.parentHandleRange.bind(this);\r\n\t\tthis.handleAdd = this.handleAdd.bind(this)\r\n\t\tthis.handleRemove = this.handleRemove.bind(this)\r\n\r\n\t\tthis.state = {\r\n\t\t\tevaluationHTMLElements: [],\r\n\t\t\tselectedEvaluationMeasures: [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\t\"id\": 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\taddButtonDisabled: true,\r\n\t\t\tdisabledMeasures: [],\r\n\t\t\treqURL: \"http://semanticannotations.ijs.si:8890/sparql?default-graph-uri=http%3A%2F%2Flocalhost%3A8890%2FMLC&&Content-Type='application/json'&query=\",\r\n\t\t\tdatasetList: [], \r\n\t\t\talgorithmList: [],\r\n\t\t\t\r\n\t\t\tevaluationMeasureListTrainTest: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy', 'testing time', 'training time'],\r\n\t\t\tevaluationMeasureListFolds: ['accuracy example-based', 'AUPRC', 'AUROC', 'average precision', 'coverage', 'F1-score example-based', 'hamming loss example-based', 'macro F1-score', 'macro precision', 'macro recall', 'micro F1-score', 'micro precision', 'micro recall', 'one error', 'precision example-based', 'ranking loss', 'recall example-based', 'subset accuracy'],\r\n\t\t\tevaluationMeasureList: this.state.evaluationMeasureListTrainTest,\r\n\t\t\tfoldsAutocompleteDisplayMode: \"none\",\r\n\t\t\tspreadSheetColumns: [],\r\n\t\t\tspreadSheetRows: [],\r\n\t\t\tvalidationFolds: false,\r\n\t\t\tselectedDatasets: [],\r\n\t\t\tselectedAlgorithms: [],\r\n\t\t\tfilterString: \"\"\r\n    \t}\r\n  \t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.setEvaluationMeasures()\r\n\t\tthis.getDatasets()\r\n\t\tthis.getAlgorithms()\r\n\t}\r\n\r\n\tsetEvaluationMeasures() //sets list and sets up for other evaluation elements\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\tevaluationMeasureList: this.state.evaluationMeasureListTrainTest\r\n\t\t},()=> {this.setEvaluationHTMLElements()})\r\n\t}\r\n\r\n\t// gets the names of the datasets\r\n\tgetDatasets=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\t\t\tPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\r\n\t\t\t\r\n\t\t\tselect ?dataset_label\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000144> .\r\n\t\t\t?dataset rdfs:label ?dataset_labela_arff .\r\n\t\t\tFILTER (!regex(?dataset_label, \"predicted\") && !regex(?dataset_label, \"fold\") && !regex(?dataset_label, \"train\") && !regex(?dataset_label, \"test\")) .\r\n\t\t\tBIND(REPLACE(?dataset_labela_arff , \".arff\", \"\", \"i\") AS ?dataset_label) .\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tgetList(this.state.reqURL, query).then((value) => {this.setState({datasetList: value})});\r\n\t}\r\n\r\n\r\n\t// gets the names of the algorithms/methods\r\n\tgetAlgorithms=()=>{\r\n\t\tvar query = `\r\n\t\t\tPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\r\n\r\n\t\t\tselect distinct ?algorithm_name\r\n\t\t\twhere {\r\n\t\t\t?dataset rdf:type <http://www.ontodm.com/OntoDM-core/OntoDM_000175> .\r\n\t\t\t?dataset <http://www.ontodm.com/OntoDM-core/ontoexp_0074> ?algorithm_name.\r\n\t\t\t}\r\n\t\t`\r\n\r\n\t\tgetList(this.state.reqURL, query).then((value) => {this.setState({algorithmList: value})});\r\n\t}\r\n\r\n\tparentHandleMeasure(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvaluationMeasures.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.measure = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\t\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\t\r\n\t}\r\n\r\n\tparentHandleRange(val, id) {\r\n\t\tlet newSelectedEvals = []\r\n\t\tthis.state.selectedEvaluationMeasures.forEach(el => {\r\n\t\t\tif(el.id === id){\r\n\t\t\t\tel.range = val\r\n\t\t\t}\r\n\t\t\tnewSelectedEvals.push(el)\r\n\t\t})\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals \r\n\t\t})\r\n\t\tthis.setDisabledMeasures()\r\n\t\tthis.addButtonDisabled()\r\n\t}\r\n\t\r\n\r\n\tsetEvaluationHTMLElements(){\r\n\t\tconsole.log(\"set HTML\")\r\n\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\tconst evals=[]\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tevals.push(\r\n\t\t\t\t<Grid container spacing = {2}>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<EvaluationMeasureRange\r\n\t\t\t\t\t\t\tonHandleMeasureChange={this.parentHandleMeasure}\r\n\t\t\t\t\t\t\tid = {this.state.selectedEvaluationMeasures[i].id}\r\n\t\t\t\t\t\t\trange = {this.state.selectedEvaluationMeasures[i].range}\r\n\t\t\t\t\t\t\tmeasure = {this.state.selectedEvaluationMeasures[i].measure}\r\n\t\t\t\t\t\t\tonHandleRangeChange={this.parentHandleRange}\r\n\t\t\t\t\t\t\tdisabledMeasures={this.state.disabledMeasures}\r\n\t\t\t\t\t\t\tevaluationMeasureList ={this.state.evaluationMeasureList}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tvariant='contained'\r\n\t\t\t\t\t\t\tcolor='secondary'\r\n\t\t\t\t\t\t\tonClick={() => this.handleRemove(this.state.selectedEvaluationMeasures[i].id)}\r\n\t\t\t\t\t\t\tdisabled={this.state.selectedEvaluationMeasures.length === 1}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<DeleteIcon/>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tevaluationHTMLElements: evals\r\n\t\t})\r\n\t\tconsole.log(evals)\r\n\t\tthis.setDisabledMeasures()\r\n\t}\r\n\r\n\tsetDisabledMeasures(){\r\n\t\tconst newDisabledMeasures = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tnewDisabledMeasures.push(this.state.selectedEvaluationMeasures[i].measure)\r\n\t\t}\r\n\t\tthis.setState({disabledMeasures: newDisabledMeasures})\r\n\t}\r\n\r\n\taddButtonDisabled(){\r\n\t\tconst regex = new RegExp(/^(\\d+(\\.\\d)?\\d*(-\\d+(\\.\\d)?\\d*)?|[><]=?\\d+(\\.\\d)?\\d*)$/)\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tif(this.state.selectedEvaluationMeasures[i].measure===null ||\r\n\t\t\t\tthis.state.selectedEvaluationMeasures[i].measure==='' ||\r\n\t\t\t\tthis.state.selectedEvaluationMeasures.length>10 ||\r\n\t\t\t\tthis.state.selectedEvaluationMeasures[i].range==='' ||\r\n\t\t\t\t!regex.test(this.state.selectedEvaluationMeasures[i].range)){\r\n\t\t\t\tthis.setState({addButtonDisabled: true})\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tthis.setState({addButtonDisabled: false})\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\thandleAdd() {\r\n\t\tlet newSelectedEvals = this.state.selectedEvaluationMeasures\r\n\t\t\tnewSelectedEvals.push({\r\n\t\t\t\t\"measure\": \"\",\r\n\t\t\t\t\"range\": \"\",\r\n\t\t\t\t\"id\": this.state.selectedEvaluationMeasures[this.state.selectedEvaluationMeasures.length-1].id+1\r\n\t\t\t})\r\n\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals,\r\n\t\t\taddButtonDisabled: true\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle add\")\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t\t\r\n\t}\r\n\r\n\thandleRemove(x) {\r\n\t\tconsole.log(\"handle remove \"+x)\r\n\t\tlet newSelectedEvals = []\r\n\t\tfor(let i = 0; i<this.state.selectedEvaluationMeasures.length; i++){\r\n\t\t\tif(this.state.selectedEvaluationMeasures[i].id!==x)\r\n\t\t\t\tnewSelectedEvals.push(this.state.selectedEvaluationMeasures[i])\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tselectedEvaluationMeasures: newSelectedEvals\r\n\t\t}, \r\n\t\t()=>{\r\n\t\t\tconsole.log(\"handle remove\")\r\n\t\t\tconsole.log(this.state.selectedEvaluationMeasures)\r\n\t\t\tthis.setEvaluationHTMLElements()\r\n\t\t\tthis.addButtonDisabled()\r\n\t\t\tthis.setDisabledMeasures()\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n    \treturn (\r\n\t\t\t<React.Fragment>\r\n\r\n\t\t\t\t<Grid container spacing = {0}>\r\n\t\t\t\t\t<Autocomplete // Dataset input field\r\n\t\t\t\t\t\tmultiple = {true}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\t\toptions={this.state.datasetList}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t\t<TextField {...params} variant='outlined' label = {\"Datasets\"} color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tthis.setState({selectedDatasets : value});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Autocomplete // split input field\r\n\t\t\t\t\t\tdefaultValue = \"train / test\"\r\n\t\t\t\t\t \tonChange={(event, value) => {\r\n\t\t\t\t\t\t\tif (value === \"folds\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\t\tfoldsAutocompleteDisplayMode : \"\",\r\n\t\t\t\t\t\t\t\t\tvalidationFolds: true,\r\n\t\t\t\t\t\t\t\t\tevaluationMeasureList: this.state.evaluationMeasureListFolds\r\n\t\t\t\t\t\t\t\t},()=> {this.setEvaluationHTMLElements()});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthis.setState({\r\n\t\t\t\t\t\t\t\t\tfoldsAutocompleteDisplayMode : \"none\",\r\n\t\t\t\t\t\t\t\t\tvalidationFolds: false,\r\n\t\t\t\t\t\t\t\t\tevaluationMeasureList: this.state.evaluationMeasureListTrainTest\r\n\t\t\t\t\t\t\t\t},()=> {this.setEvaluationHTMLElements()});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tmultiple = {false}\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tlimitTags={2}\r\n\t\t\t\t\t\toptions={[\"folds\", \"train / test\"]}\r\n\t\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Validation\" color='secondary' />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Autocomplete // methods input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={3}\r\n\t\t\t\t\toptions={this.state.algorithmList}\r\n\t\t\t\t\tsx={{width: 300}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Methods\" color='secondary'/>\r\n\t\t\t\t\t}\r\n\t\t\t\t\tonChange={(event, value) => {\r\n\t\t\t\t\t\tthis.setState({selectedAlgorithms : value});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<Autocomplete // folds input field\r\n\t\t\t\t\tmultiple = {true}\r\n\t\t\t\t\tlimitTags={50}\r\n\t\t\t\t\toptions={[\"1\", \"2\", \"3\"]}\r\n\t\t\t\t\tsx={{width: 300, display : this.state.foldsAutocompleteDisplayMode}}\r\n\t\t\t\t\trenderInput={(params) => \r\n\t\t\t\t\t\t<TextField {...params} variant='outlined' label = \"Fold\" color='secondary'/>\r\n\t\t\t\t\t}\t\r\n\t\t\t\t/>\r\n\t\t\t\t{this.state.evaluationHTMLElements}\t\r\n\r\n\t\t\t\t<Button variant='contained'\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tonClick={this.handleAdd}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\t<AddIcon />\r\n\t\t\t\t</Button>\r\n\r\n\t\t\t\t<Button // filter / sumbmit button\r\n\t\t\t\tcolor='secondary'\r\n\t\t\t\tvariant='contained'\r\n\t\t\t\t\r\n\t\t\t\tonClick={() => this.callPerformanceDataTableMethod()}\r\n\t\t\t\tdisabled={false} // before: this.state.addButtonDisabled\r\n\t\t\t\t>\r\n\t\t\t\t\tFILTER\r\n\t\t\t\t</Button>\r\n\t\t\t\t\r\n\t\t\t\t{/* <div style={{ height: 400, width: '100%' }}>\r\n\t\t\t\t<DataGrid\r\n\t\t\t\t\trows={this.state.spreadSheetRows}\r\n\t\t\t\t\tcolumns={this.state.spreadSheetColumns}\r\n\t\t\t\t\tpageSize={10}\r\n\t\t\t\t\trowsPerPageOptions={[10]}\r\n\t\t\t\t/>\r\n\t\t\t\t</div> */}\r\n\r\n\t\t\t\t<PerformanceDataTable\r\n\t\t\t\t\tsetFilter={click => this.callPerformanceDataTableMethod = click}\r\n\t\t\t\t\tselectedDatasets = {this.state.selectedDatasets}\r\n\t\t\t\t\tselectedAlgorithms = {this.state.selectedAlgorithms}\r\n\t\t\t\t\tevaluationMeasureList = {this.state.evaluationMeasureList}\r\n\t\t\t\t\tvalidationFolds = {this.state.validationFolds}\r\n\t\t\t\t\tselectedEvaluationMeasures = {this.state.selectedEvaluationMeasures}\r\n\t\t\t\t/>\r\n\t\t</React.Fragment>\r\n\t\t);\r\n  \t}\r\n}\r\n\r\nexport default Body;"]},"metadata":{},"sourceType":"module"}